<document>
<title>CayenneModeler Guide</title>
<toc name="toc-modeler-guide" chapter="2. ORM Case Study"/>
<body>
	<section name="2. ORM Case Study">
 	<subsection name="2.2 Start from the O/R Model">
 		 	<p><b>To be rewritten...</b></p>

		Here are the steps to create a new Cayenne project.
		<ol>
		<li>Start CayenneModeler</li>
		<li>Click File->New Project.
			System will prompt you to choose the project location -
			folder which will be the root for all other project files.
		</li>
		<li>Select folder and click Save.
			If there is already a project (cayenne.xml file) in the folder you
			selected, system will ask you if you want to overwrite existing
			project.</li>
		<li>Once you have successfully created the project, the system will
		split the screen in two panes. Right pane is the Browse View used to
		navigate through domains, data nodes, data maps and entities. Left pane
		is the Detail view showing the details of the item currently selected in
		the Browse view.</li>
		<li>Click Project->Create Domain. The system will show the new domain
		selected in the Browse view and detail information (only name) in the
		Detail view.</li>
		<li>Rename the domain by typing Domain1 in the detail view.
		</li>
		<li>Click on Project->Create Data Map.
		System will prompt you for the file name. Modeler will not allow you to
		go outside of the project folder, though you can create folders under
		it. Type datamap1.xml in the file name field and click
		"Save".</li>
		<li>System will show new data map under Domain1 and show its
		detail information in the Detail view.</li>
		<li>Type DataMap1 in Data map name field</li>
		<li>Click Project->Create Object Entity. System will create
		a new object entity. It will show the new object entity under DataMap1
		and its detail information in the Detail View.</li>
		<li> Type ObjEntity1 in the entity name. Type myapp.ObjEntity1 in
		the class name field.</li>
		<li>Click Attributes tab on the Detail view.</li>
		<li>Click Add button to add new attributes. Enter attribute
		names in the Name column and select types of the attributes
		in the Type column</li>
		<li>Click Project->Create Object Entity. System will create another new
		object entity. It will show it under DataMap1 and its
		Attribute tab in the Detail view.</li>
		<li>Click Entity tab and enter ObjEntity2 for
		its name and myapp.ObjEntity2 for its class name.</li>
		<li>Go back to the Attributes tab and enter its attributes.
		</li>
		<li>Click ObjEntity1 in the Browse view. Click Relationships tab.
		</li>
		<li>Click Add button to add relationships.</li>
		<li>System will add a row in the relationships table. Select
		ObjEntity2 in a target column.</li>
		<li>Go to Entity tab. Click New button to create
		a new db entity and associate it with ObjEntity1.</li>
		<li>System will show new db entity under DataMap1 and show
		its detail information in the Detail view.</li>
		<li>Change the name to DbEntity1, go to
		Attributes tab and enter some attributes.</li>
		<li>Go back to ObjEntity1. Click Attributes tab. Now it has
		more columns for showing the mapping of the object attributes to the db
		attributes.</li>
		<li>Select attribute in the Db Attribute column. CayenneModeler 
		DOES NOT enforce at this time compatibility between obj
		attribute and db attribute types, so make sure you don't match up
		java.util.Date type with VARCHAR.</li>
		<li>Select DataMap1 and click Project->Create DB Entity.
		Follow the steps for creating DbEntity2. Add attributes to it.</li>
		<li>Go to db entity Relationships tab and click
		Add button</li>
		<li>System will add a row to the relationships table. Select
		DbEntity1 as the target. This will cause foreign to primary key
		relationship (if supported by the database) to be generated when
		generating the database.</li>
		<li>Click Database Mapping button. System will bring up Db
		Relationship dialog for entering the columns used for enforcing the
		relationship between these two database tables. Use Add to
		add the row and select the Source (from currently edited) and Target
		columns. Click Save when finished.</li>
		<li>Select DataMap1 in Browse view.</li>
		<li>Click Tools->Generate Database. System will bring up
		Enter JDBC Information dialog.</li>
		<li>Type in the connection information for the database and click
		Ok.
			In my case (I am connecting to the MySQL database).
			Make sure JDBC driver is in your Classpath or in jre\lib\ext.
			Also make sure you select RDBMS Adapter for your
			database.
			The adapter determines the generation of the SQL.</li>
		<li>The system will bring up Generate Database dialog with
		the
			SQL it intends to use for generation of the new database.
			Click Drop check box if you want table definitions in
			the database
			to be overwritten (comment: this feature is still rather clunky.
			Will become more reliable in the beta release).</li>
		<li>Click Generate. This will generate our database!</li>
		<li>Press Ctrl+S to save the project file.
			It will bring the Warning or Error dialog if there are any errors or
			warnings.
			The system will bring you to the appropriate screen when you click
			the error message.</li>
		</ol>
	</subsection>
    </section>
</body>
</document>





