<document>
<title>CayenneModeler Guide - Flattened Relationships</title>
<toc name="toc-modeler-guide" chapter="6. Modeling Object Layer"/>  
<body>
    <section name="6. Modeling Object Layer">
   
	<subsection name="6.4 Flattened Relationships">
	<p>ObjRelationships that map to more than a single DbRelationship are called
	"flattened".</p>
	
	<p>The most common case for using flattened relationships is modeling 
	many-to-many relationships with a join table. 
	E.g. ARTIST DbEntity has to-many relationship to ARTIST_EXHIBIT;
	ARTIST_EXHIBIT in turn has a to-one relationship to EXHIBIT DbEntity. We can 
	create a single ObjRelationship from Artist ObjEntity to Exhibit ObjEntity that
	spawns two DbRelationships. This will be a to-many relationship. Lets say it is 
	called "exhibitArray". Generated class file for Artist would contain a getExhibitArray() 
	method returning a list of Exhibits for a given artist instance. An obvious advantage 
	of having a flattened relationship in this case is to avoid mapping a join table as an object,
	meaningless in the context of the object model.</p>
	
	<p>Flattened relationships work across any particular combination of to-one and to-many DbRelationships.
	If all the relationships are to-one, then the resulting flattened relationship is also to-one.  
	If there is at least one to-many, the result is to-many as well. Most of the possible combinations are 
	read only. One particularly useful combination is read/write. It is many-to-many (n:m) 
	relationships mentioned above.</p>
	
	<p>Coming back to an example with artists and exhibits, here is how the relationships would look like
	if a DataMap was reverse engineered from the database schema: 
	</p>
	
	<img src="/images/modelerguide/flatten1.jpg" width="520" height="335"/>
	
	<p>Note that a join table ARTIST_EXHIBIT is by default modeled as an ObjEntity ArtistExhibit 
	and Artist has a to-many relationship to it. To create a straight many-to-many from Artist to Exhibit,
	perform the following steps: 
	</p>
	
	<ul>
		<li>Create a new relationship for Artist ObjEntity. Select "Exhibit" as a target. 
		Name it something meaningful, e.g. "exhibits"</li>
		
		<li>Click "Database Mapping" button in the lower right corner. A pop up window opens with 
		choices showing 
		all possible paths from Artist to Exhibit entity. Select "artistExhibitArray.toExhibit"</li>
	</ul>
	
	<img src="/images/modelerguide/flatten2.jpg" width="520" height="335"/>
	
	<ul>
		<li>Delete unneeded "artistExhibitArray" relationship for the Artist ObjEntity.</li>
		
		<li>Repeat the above 3 steps for the Exhibit entity if the reverse relationship
		is desired.</li>
		
		<li>Delete ArtistExhibit ObjEntity (but not ARTIST_EXHIBIT DbEntity!). It is no longer needed.
		</li>
		
		<li>Regenerate Java classes for Artist and Exhibit, since their relationships where changed.</li>
	</ul>
	
	</subsection>
    </section>
</body>
</document>

