<document>
<title>CayenneModeler Guide - CayenneModeler Concepts</title>

    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/modelerguide/index.html</up>
	<prev>/modelerguide/runmodeler.html</prev>
	<next>/modelerguide/mapschema.html</next>
</navigator>
<body>
 	<section name="3. CayenneModeler Concepts: What the Buttons Mean"> 
 		<subsection name="3.1 Project">
 		
 		<p></p>
		<img src="/images/modeler/icon-new.gif" width="16" height="16"/>
		<img src="/images/modeler/icon-open.gif" width="16" height="16"/>
		<img src="/images/modeler/icon-save.gif" width="16" height="16"/>
		
		<p>Cayenne <strong>Project</strong> is a logical deployment unit, that consists of a main project
		file (called <code>cayenne.xml</code>) and zero or more DataNode (*.driver.xml)
		and DataMap (*.map.xml) XML files. Project can be opened and edited in the CayenneModeler.
		</p>
		</subsection>
		
		<subsection name="3.2 DataDomain">
		
		<p></p>
		<img src="/images/modeler/icon-dom.gif" width="16" height="16"/>
		
		<p>Each <strong>DataDomain</strong> is an abstraction of a logical
		data source, possibly spreading multiple physical databases.
		<code>cayenne.xml</code> file lists DataDomains present in the project. 
		Most projects will contain only a single domain.
		</p>
		</subsection>
		
		<subsection name="3.3 DataNode">
		
		<p></p>
		<img src="/images/modeler/icon-node.gif" width="16" height="16"/>
		
		<p>
		<strong>DataNode</strong> is an object that corresponds to a single physical data source, normally a database.
		Currently there are two types of DataNodes:
			    
			<ul>
				 <li>Based on DataSource obtained via JNDI from the container (e.g. a WebLogic or Tomcat server).</li>
				 <li>Based on JDBC driver. In this case Cayenne provides its own connection pooling and other functions 
				 expected from a DataSource.</li>
			</ul>
			
		DataNode references zero or more DataMaps defined under DataDomain.
		</p>
		</subsection>
		
		<subsection name="3.4 DataMap">
		
		<p></p>
		<img src="/images/modeler/icon-datamap.gif" width="16" height="16"/>
		
		<p><strong>DataMap</strong> is a collection of Object/Relational mapping information linking Java object layer
		with the relational database. DataMaps are created within DataDomains and can be later linked to DataNodes.
		</p>
		</subsection>
		
		<subsection name="3.5 Entities">
		
		<p></p>
		<img src="/images/modeler/icon-dbentity.gif" width="16" height="16"/>
		<img src="/images/modeler/icon-derived-dbentity.gif" width="16" height="16"/>
		<img src="/images/modeler/icon-objentity.gif" width="16" height="16"/>
		
		<p>There are two types of entities in Cayenne DataMaps: <strong>ObjEntities</strong>, reflecting the structure of the object layer, 
		and <strong>DbEntities</strong> that describe database tables and views. In other words, ObjEntity is a descriptor of a persistent Java 
		class, and DbEntity is a descriptor of a database table or view. Each ObjEntity is based on a DbEntity, but there can be DbEntities
		that do not have a corresponding ObjEntity.
		</p>
		
		<p>There is a special kind of DbEntity - <strong>DerivedDbEntity</strong> - that has limited capabilities of defining "virtual" 
		database views.
		</p>
		</subsection>
		
		<subsection name="3.7 Attributes">
		
		<p></p>
		<img src="/images/modeler/icon-attribute.gif" width="16" height="16"/>
		
		<p>Attributes define simple data fields. <strong>ObjAttributes</strong> are descriptors for Java class
		persistent properties, <strong>DbAttributes</strong> are descriptors for table or view columns. ObjAttributes
		map to DbAttributes.
		</p>
		</subsection>
		
		<subsection name="3.8 Relationships">
		
		<p></p>
		<img src="/images/modeler/icon-relationship.gif" width="16" height="16"/>
		<p>Relationships define how different entities relate to each other. <strong>ObjRelationships</strong> describe
		an association between two persistent Java classes (e.g. "Artist object has one or more Painting objects"), 
		<strong>DbRelationships</strong> model the same
		concept in the database world (Primary Key - Foreign Key association). ObjRelationship consists of one or more DbRelationships.
		</p>
		</subsection>
		
    </section>
</body>
</document>





