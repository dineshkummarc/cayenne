<document>
<title>CayenneModeler Guide</title>
<navigator>
	<up>/modelerguide/index.html</up>
</navigator>
<body>
    <section name="Inheritance Mapping">
        	<p>In Java it is natural to think about classes and
        	objects in terms of inheritance. Relational databases on the other hand
        	do not have this concept. This is another area where Cayenne provides
        	a bridge between the two worlds. There are a few different ways to implement
        	inheritance of persistent objects. Currently Cayenne explicitly supports 
        	"Single Table Mapping".
        	</p>
        	
        	<subsection name="X.1 Single Table Mapping" anchor="single">
        	<p>Modeling Java inheritance hierarchy within a single database table
        	is the method requiring the smallest runtime overhead. A single table
        	would contain combined attributes of superclass and all subclasses. There 
        	is also a special column in this table that contains a 
        	small predefined set of values (also called "class indicator"). 
        	Each one of such values corresponds to a Java class (or an ObjEntity)
        	in the DataObject inheritance hierarchy. Based on this value, Cayenne can 
        	instantiate objects of the right class when it reads the data. When fetching 
        	subclasses it can also build a needed qualifier to filter the records
        	that map to this subclass.</p>
        	
        	<p>To show how single table inheritance works lets take an example of the following class
        	hierarchy:</p>
        	
<source>
public abstract class Account extends CayenneDataObject {
  public String getAccountNumber() { ... }
  public Customer getOwner() { ... }
  public Date getCreationDate() { ... }
  ....
}

public class CheckingAccount extends Account {
  public Double getMinimumBalance() { ... }
  ....
}

public class SavingsAccount extends Account {
  public Double getInterestRate() { ... }
  ....
}
</source>
    
    <p>Data for all 3 classes will be stored in the following table:</p>
    
	<table>
		<tr>
			<th>Column name</th>
			<th>Type</th>
			<th>Allows NULL</th>
			<th>Comments</th>
		</tr>
		<tr>
			<td>ACCOUNT_ID</td>
			<td>NUMBER</td>
			<td>no</td>
			<td>PK</td>
		</tr>
		<tr>
			<td>ACCOUNT_NUMBER</td>
			<td>VARCHAR(20)</td>
			<td>no</td>
			<td></td>
		</tr>
		<tr>
			<td>CUSTOMER_ID</td>
			<td>NUMBER</td>
			<td>no</td>
			<td>FK</td>
		</tr>
		<tr>
			<td>CREATION_DATE</td>
			<td>DATE</td>
			<td>no</td>
			<td></td>
		</tr>
		<tr>
			<td>MINIMUM_BALANCE</td>
			<td>NUMBER</td>
			<td>yes</td>
			<td></td>
		</tr>
		<tr>
			<td>INTEREST_RATE</td>
			<td>NUMBER</td>
			<td>yes</td>
			<td></td>
		</tr>
		<tr>
			<td>ACCOUNT_TYPE</td>
			<td>CHAR(1)</td>
			<td>no</td>
			<td>possible values are "C", "S"</td>
		</tr>		
	</table>
	
			<p>Inheritance in CayenneModel is mapped in terms of ObjEntities
			that inherit attributes and relationships from their parent entities.
			Since all the data is coming from the same database table, there will
			be only a single DbEntity for the whole ObjEntity hierarchy.
			</p>
			
			<p>First step is to create the root ObjEntity of the hierarchy, which is
			"Account". In the ObjEntity detail panel, select "Inheritance" tab and 
			check "Is Root" checkbox. Also check "Is Abstract" checkbox, since Account 
			is an abstract class and can't be instantiated. In "Class Indicator" 
			dropdown select "ACCOUNT_TYPE". The "Value" field will be disabled.</p>
			
			<p>After that, CheckingAccount and SavingsAccount entities can be created.
			For each one of them, "Account" must be selected as their parent ObjEntity
			under "Inheritance" tab. "Value" column should
			contain "C" for checking and "S" for savings account entities.
			</p>
	
			</subsection>
    </section>
    

</body>
</document>





