<document>
<title>User Guide - Using DataContext</title>
<toc name="toc-user-guide" chapter="6. Using DataContext"/>
<body>   	
    
    <section name="6. Using DataContext">
	<subsection name="6.1 Obtaining DataContext">
		<p>There are a few ways to get hold of a DataContext instance needed for 
		database access in Cayenne.			
		</p>
		
		<subsection name="6.1.1 Standalone Application">
		<p>In a standalone application, new DataContext instance can be obtained 
		using the following code:</p>
            
<source>
import org.objectstyle.cayenne.access.DataContext;
...

DataContext ctxt = DataContext.createDataContext();
...
</source>
        
        	<p>This context should be normally preserved for the duration of the user session.</p>
		</subsection>
		
		<subsection name="6.1.2 Web Application">
        	<p>For a web application Cayenne can be <i>optionally</i> configured to automatically 
        	create a new instance of DataContext for each new HttpSession
        	(this is explained in "Deployment" chapter). 
        	If this is done, the following code is used to obtain HttpSession's DataContext :</p>

		<source>
import org.objectstyle.cayenne.conf.BasicServletConfiguration;
import org.objectstyle.cayenne.access.DataContext;
...

// assume this exists
HttpSession session;
DataContext ctxt = BasicServletConfiguration.getDefaultContext(session);
...
</source>
		</subsection>
	
		<subsection name="6.1.3 Multiple DataDomains (Advanced)">
		<p>Cayenne can be configured to support mass database hosting. This is a so-called
		Application Service Provider (ASP) scenario. Basic architecture of such setup
		is a single application supporting multiple databases (or more generally - data sources), 
		each one with same or similar schema. Each data source corresponds to an individual ASP
		"customer" using the system. Each customer has a number of users that will log in to the 
		system and are only allowed to view data from their data source.</p>
		
		<p>This approach, though not required for most normal applications, could be quiet common
		and powerful in some enterprise systems. To implement it, each DataContext must be limited
		to access only a relevant subset of datasources.</p>
		
		<p>Considering that behind the scenes a source of
		DataContext instances is an object called DataDomain, Cayenne allows creation of multiple 
		DataDomains per project. Each DataDomain would 
		support a single "customer". Creation of DataContext in this case is done using DataDomain name 
		as a parameter:</p>
		
		<source>
import org.objectstyle.cayenne.access.DataContext;
...

// domain name string is initialized depending on
// the application logic. For instance it can be based
// on the logged in user's company, etc.
String domainName = ...;
DataContext ctxt = DataContext.createDataContext(domainName);
...
</source>
		</subsection>
	</subsection>
    </section>
</body>
</document>
