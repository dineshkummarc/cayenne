<document>
<title>User Guide - Using DataContext</title>
<toc name="toc-user-guide" chapter="6. Using DataContext"/>
<body>   	
    
    <section name="6. Using DataContext">
	<subsection name="6.2 Running Queries">
	
	<p>Being an instance of <a href=
	"../../api/cayenne/org/objectstyle/cayenne/access/QueryEngine.html">QueryEngine</a>
	DataContext can be used to run any types of queries from <code>org.objectstyle.cayenne.query</code>
	package. In addition to generic QueryEngine methods, it provides a set of user-friendly API
	for the most common query types.
	</p>	
	
	<subsection name="6.2.1 Selecting Queries">
	
	<p>The following methods are used to run queries that return a result list:</p>
	
	<ul>
	<li><code>public java.util.List <b>performQuery</b>(GenericSelectQuery query)</code><br/>
	The most commonly used query method. It is intended to run SelectQuery or SQLTemplate queries.
	<p></p>
	</li>
	
	<li><code>public ResultIterator <b>performIteratedQuery</b>(GenericSelectQuery query) throws CayenneException</code><br/>
	Unlike other query methods this one returns an iterator backed by an open ResultSet.
	Potential benefits and shortcomings of running queries this way are discussed in "Performance Tuning" chapter.
	This is the only query method that throws chekced exceptions. Also it is important to remember that returned ResultIterator
	requires explicit cleanup via calling <code>close()</code>.
	<p></p>
	</li>
	
	<li><code>public java.util.List <b>performQuery</b>(String name, boolean refresh)</code><br/>
	Runs a named query stored in the DataMap.
	<p></p>
	</li>
	</ul>
	</subsection>
	
	<subsection name="6.2.2 Non-Selecting and Mixed Queries">
	<p>The following methods are used to run non-selecting queries or queries that have complex results,
	including update counts, and result sets:</p>
	<ul>
	<li><code>public int[] <b>performNonSelectingQuery</b>(Query query)</code>  
	<br/>Executes an updating query, returning update counts.
	<p></p>
	</li>
	<li><code>public void <b>performQueries</b>(java.util.List queries, OperationObserver resultConsumer)</code>  
	<br/>The most generic query execution method. Usually used for queries that return complex results, e.g. queries
	based on stored procedures. Allows to specify OperationObserver that collects query results.
	A very useful OperationObserver implementation is <a href=
		"../../api/cayenne/org/objectstyle/cayenne/access/QueryResult.html">QueryResult</a>.
	<p></p>
	</li>
	</ul>
	</subsection>
	</subsection>
    </section>
</body>
</document>
