<document>
<title>User Guide - Writing Cayenne Applications</title>
<properties>
      <author>Andrei Adamchik</author>
</properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/appguide/javagen.html</prev>
	<next>/userguide/appguide/exp.html</next>
</navigator>    
<body>
    <section name="4. Writing Cayenne Applications">        
        <subsection name="4.4 Using Cayenne" anchor="cayenne">
        
            <subsection name="4.4.1 Getting DataContext" anchor="cayenne_dc">
            <p>In a Cayenne application most of the database work is done via a 
            <a 
            href="../../api/org/objectstyle/cayenne/access/DataContext.html">DataContext</a>
            instance. It isolates changes made by a single user from other users. In
            web application speak this means that DataContext usually has a "session
            scope". <a 
            href="../../api/org/objectstyle/cayenne/access/DataDomain.html">DataDomain</a>
            usually serves as a factory for DataContext objects. In a simple
            case of a standalone application, DataContext can be obtained with the following
            lines of code:</p>
            
<source>
import org.objectstyle.conf.Configuration;
import org.objectstyle.access.DataContext;
...

DataContext ctxt = Configuration.getSharedConfig().getDomain().createDataContext();
...
</source>
        
        <p>This context is usually preserved for the duration of the user session. 
        In case of web applications Cayenne can be configured to set a default DataContext
        inside each of HttpSession automatically (this is explained in "Deployment" 
        chapter below). To obtain session DataContext the following code can be used:</p>

<source>
import org.objectstyle.cayenne.conf.ServletConfiguration;
import org.objectstyle.cayenne.access.DataContext;
...

// assume this exists
HttpSession session;
DataContext ctxt = ServletConfiguration.getDefaultContext(session);
...
</source>
            </subsection>
            
            <subsection name="4.4.2 Fetching Objects" anchor="cayenne_fetch">
            <p>To fetch a list of objects matching a certain criteria, a SelectQuery
            object should be created. It can be executed using DataContext, bringing
            back a list of DataObjects:</p>
            
<source>
import java.util.List;
import org.objectstyle.access.DataContext;
import org.objectstyle.query.SelectQuery;
import org.objectstyle.exp.Expression;
import org.objectstyle.exp.ExpressionFactory;
...

// assume this exists and initialized
DataContext ctxt;
...
Expression e = 
   ExpressionFactory.binaryPathExp(Expression.GREATER_THAN, "estimatedPrice", 100000);
SelectQuery q = new SelectQuery("Painting", e);
List realArt = ctxt.performQuery(q);
...
</source>           
            </subsection>
            
            <subsection name="4.4.3 Saving Modified Objects" anchor="cayenne_save">
            <p>Continuing the previous example, this section shows how to save changes made to
            DataObjects. Lets do the following operations: double the price of the first
            retrieved painting, add new painting that belongs to the same artist as the 
            painting fetched before, save all changes:</p>
            
<source>
import java.math.BigDecimal;
import java.util.List;
import org.objectstyle.access.DataContext;
import org.objectstyle.query.SelectQuery;
import org.objectstyle.exp.Expression;
import org.objectstyle.exp.ExpressionFactory;
import org.objectstyle.art.Painting;
import org.objectstyle.art.Artist;
...

// assume this exists and initialized
DataContext ctxt;
...
Expression e = 
  ExpressionFactory.binaryPathExp(Expression.GREATER_THAN, "estimatedPrice", 100000);
SelectQuery q = new SelectQuery("Painting", e);
List realArt = ctxt.performQuery(q);
if(realArt.size() > 0) {
  Painting firstPainting = (Painting)realArt.get(0);
  
  // double the price
  double oldPrice = firstPainting.getEstimatedPrice().doubleValue();
  firstPainting.setEstimatedPrice(new BigDecimal(oldPrice * 2.00));
  
  // create new painting and register it with DataContext
  // "Painting" string is a name of ObjEntity in the DataMap
  Painting newPainting = (Painting)ctxt.createAndRegisterNewObject("Painting");
  newPainting.setTitle("Sunset as it is");
  
  // get artist via relationship
  // "toArtist" is a relationship property name
  // that is being accessed via getter
  Artist artist = firstPainting.getToArtist();
  
  // assign new painting to an artist
  artist.addToPaintingArray(newPinting);
  
  // save all the changes we've made so far
  ctxt.commitChanges();
}
...
</source> 
              <p>Notice that all this is done without writing any SQL.</p>
            </subsection>
        </subsection>
    </section>
</body>
</document>
