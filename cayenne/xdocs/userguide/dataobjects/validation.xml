<document>
<title>User Guide - Working with DataObjects</title>
<toc name="toc-user-guide" chapter="8. Working with DataObjects"/>
<body>
    <section name="8. Working with DataObjects">
    	<subsection name="8.5 DataObject Validation">
    	<p>DataObject implements a set of methods to validate its state. DataContext calls these methods 
    	before performing a commit. If validation fails, commit is aborted with <a href=
    	"../../api/cayenne/org/objectstyle/cayenne/validation/ValidationException.html">ValidationException</a>.
    	</p>
    	
    	<subsection name="8.5.1 Validation API">
    	<p>Depending on the non-committed object state, DataContext calls one of the methods 
    	described below (description of method behavior is provided for CayenneDataObject implementation):</p>
    	
    	<ul>
            <li><code>public void <b>validateForInsert</b>(ValidationResult validationResult)</code><br/>
			
			<code>public void <b>validateForUpdate</b>(ValidationResult validationResult)</code><br/>
			<p>Implementation internally calls <code>validateForSave(..)</code>.  When 
			overriding, in most cases developers should invoke "super".
			</p>
			</li>
			
			<li><code>public void <b>validateForDelete</b>(ValidationResult validationResult)</code><br/>
			These method does nothing by default and exists merely for overriding.
			<p></p>
			</li>
			
			<li><code>protected void <b>validateForSave</b>(ValidationResult validationResult)</code><br/>
			This method only exists in CayenneDataObject (and not in DataObject). It is invoked  internally 
			from  <code>validateForInsert(..)</code> and 
			<code>validateForUpdate(..)</code>, performing some generic validation 
			based on the DataMap information. This includes checking for nulls and for values that exceed their
			database size limitations. When overriding this method to include custom validation, developers 
			should call "super" in most cases.
			<p></p>
			</li>
        </ul>
        
        <p>Custom validation method implementation would normally append any failures to the provided <a href=
    	"../../api/cayenne/org/objectstyle/cayenne/validation/ValidationResult.html">ValidationResult</a> 
    	instance. After validating all non-committed objects, DataContext (or rather its ObjectStore)
        will check if the ValidationResult is not empty, and throw an exception if there is at least one failure.
       Typical custom validation method would look like that:</p>
       
<source>
public class Painting extends _Painting {
   ...
   protected void validateForSave(ValidationResult validationResult) {
      super.validateForSave(validationResult);
     
      // check business rules
      if(getEstimatedPrice().doubleValue() &lt;= 0.0) {
         validationResult.addFailure(
                this, // source object of the failure
                Painting.ESTIMATED_PRICE_PROPERTY, // failed property name
                "Painting price must be greater than zero.")); // error message  
      }
   }
   ...
} 
</source>
		</subsection>
		
		<subsection name="8.5.2 Turning Validation On/Off">
		<p>Whether DataContext performs validation depends on the value of its property
		"validatingObjectsOnCommit". Calling "isValidatingObjectsOnCommit()" returns currently 
		configured value. Default value (usually "true") is propagated from the parent DataDomain
		when DataContext is created. This default value can be configured using CayenneModeler as 
		described in Deployment Configuration chapter of the Modeler Guide. 
		</p>
		</subsection>
		
    	</subsection>
    </section>
</body>
</document>

