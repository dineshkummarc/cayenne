<document>
<title>User Guide - Quick Start</title>
    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/quickstart/modeler.html</prev>
	<next>/userguide/quickstart/webapp.html</next>
</navigator> 
<body>
    <section name="3. Quick Start">
    	<subsection name="3.2 &quot;Command-line Application&quot; Tutorial">    	
    	<p>This section shows how to write a simple command-line application
    	using Cayenne. For a more detailed discussion read <a href="../appguide/index.html">"Writing 
    	Cayenne Applications"</a> section.</p>
    	
    	<panel name="Note:">
    		Full tutorial source code is included in Cayenne distribution in "src/tutorials" folder.
    	</panel>
    		
    	
    	<p>Tutorial steps:</p>
    	
    	<ul>
    		<li><a href="#1">Tutorial Setup.</a></li>
    		<li><a href="#2">Prepare Tutorial Database.</a></li>
    		<li><a href="#3">Setup Cayenne Configuration Files.</a></li>
    		<li><a href="#4">Create Database Primary Key Support.</a></li>
    		<li><a href="#5">Generate Java Code for DataObjects.</a></li>
    		<li><a href="#6">Application Code.</a></li>
    		<li><a href="#7">Compile and Run the Application.</a></li>
    	</ul>
    	
       	<subsection name="3.2.1 Tutorial Setup" anchor="1">
       		<p>- Follow the steps outlined in <a href="../install/index.html">Cayenne 
       		installation instructions</a>. In particular, JSDK 1.4 must be installed.
       		</p>
       		
    		<p>- Add cayenne.jar to the CLASSPATH of the application. Do not
    		put it in JRE extendsions directory - eventually this will lead to 
    		ClassNotFoundException problems.</p>
    		
    		<p>- Create a new folder named <code>cayenne-cmd-app</code> 
    		anywhere in the filesystem. This directory is referred to as 
    		"project directory" further in this chapter. Note that when you
    		are finished going through all the steps below, project directory 
    		will become a mirror of this tutorial source folder distributed
    		with Cayenne.</p>
    	</subsection>
    	
    	<subsection name="3.2.2 Prepare Tutorial Database" anchor="2">
    		<p>Run <a href="../../tutorials/cayenne-cmd-app/tutorialdb.sql"><code>tutorialdb.sql</code></a>
    		script located in the project directory to create test tables. 
    		This script is tested on MySQL, but it should be easy to port to any other RDBMS.</p>
    	</subsection>
    	
    	<subsection name="3.2.3 Setup Cayenne Configuration Files" anchor="3">
    		<p>Configuration files included in this tutorial are:
    		
    		<ul>
    			<li><a href="../../tutorials/cayenne-cmd-app/cayenne.xml">cayenne.xml</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/datamap.xml">datamap.xml</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/driverinfo.xml">driverinfo.xml</a></li>
    		</ul>
    		
    		Open <code>cayenne.xml</code> 
    		file in CayenneModeler and make the following changes:
    		<ul>
    			<li>if the database used is NOT MySQL, <code>cayenne.xml</code>
    			must be modified to use an adapter for the appropriate database.</li>
    			<li><code>driverinfo.xml</code> must be modified to reflect connection and
    			driver information of the test database.</li>
    		</ul>         	
    		</p>
    	    <img src="/images/tutorial-cfg-node.gif" width="639" height="503" border="0" align="middle"
			alt="Configure Node Panel"/>
    	</subsection>
    	
    	<subsection name="3.2.4 Create Database Primary Key Support." anchor="4">
    	<p>Open <code>cayenne.xml</code> in CayenneModeler and generate needed database
    	objects for primary key support by following these  
    	<a href="../modeler/pksupport.html">instructions</a>.</p>
    	</subsection>
    	
    	<subsection name="3.2.5 Generate Java Code for DataObjects" anchor="5">
    		<p>Create "<code>java</code>" subdirectory in the project directory.
    		Use CayenneModeler to generate Java classes for DataObjects by going to 
    		<strong>"Tools -> Generate Classes"</strong> and selecting the newly created
    		"java" directory in the opened popup:</p>
    		<img src="/images/classgen.gif" width="546" height="489" border="0" align="middle"
			alt="Generate Classes Dialog"/>
			
    		<p>After the generation 
    		is done, the following files should appear in the <code>java/test</code> subdirectory of the 
    		project directory:
    		
    		<ul>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/_Artist.java">_Artist.java</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/Artist.java">Artist.java</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/_Painting.java">_Painting.java</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/Painting.java">Painting.java</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/_Gallery.java">_Gallery.java</a></li>
    			<li><a href="../../tutorials/cayenne-cmd-app/java/test/Gallery.java">Gallery.java</a></li>
    		</ul>
    		</p>    	
    	</subsection>
    	
    	<subsection name="3.2.6 Application Code" anchor="6">
    		<p>A simple application that uses Cayenne is located in 
			   <a href="../../tutorials/cayenne-cmd-app/java/test/Main.java">Main.java</a>.
			   Copy the source file to the java/test project subdirectory.
            </p>    	
    	</subsection>
    	
    	<subsection name="3.2.7 Compile and Run the Application" anchor="7">
    		<p>Compile the source code 
    		(assume that JAVA_HOME variable points to the JSDK 1.4 installation). 
    		On Windows:</p>
<source>
projectdir> set CLASSPATH=%CLASSPATH%;%CAYENNE_HOME%\lib\cayenne.jar
projectdir> %JAVA_HOME%\bin\javac java\test\*.java
</source>

    		<p>On UNIX:</p>
<source>
projectdir# export CLASSPATH=$CLASSPATH:$CAYENNE_HOME/lib/cayenne.jar
projectdir# $JAVA_HOME/bin/javac java/test/*.java
</source>


			<p>Main tutorial class is "test.Main". It takes a single parameter - a search
			word to look up a gallery by name. It will try to find a matching gallery, then
			create a new artist (Salvador Dali) with a single painting and add this painting 
			to the found gallery. To run the tutorial do something like this (example given for Windows):
			</p>
<source>
projectdir> set CLASSPATH=%CLASSPATH%;java
projectdir> %JAVA_HOME%\bin\java test.Main metro
</source>
			
			<p>If there is a gallery matching search criteria (in our case "Metropolitan Museum of Art"
			would match the word "metro"), the following output will be printed:
			</p>
<source>
SEVERE access.QueryLogger 0: --- will run 1 query.
SEVERE access.QueryLogger 40: SELECT t0.GALLERY_NAME, t0.GALLERY_ID FROM GALLERY t0 
WHERE UPPER(t0.GALLERY_NAME) LIKE UPPER(?) [params: '%metro%']
SEVERE access.QueryLogger 140: === returned 1 row.

Found gallery 'The Metropolitan Museum of Art'.

SEVERE access.QueryLogger 210: --- will run 2 queries.
SEVERE access.QueryLogger 220: INSERT INTO ARTIST (ARTIST_ID, DATE_OF_BIRTH, ARTIST_NAME) 
VALUES (?, ?, ?) [params: 41, NULL, 'Salvador Dali']
SEVERE access.QueryLogger 220: === updated 1 row.
SEVERE access.QueryLogger 230: INSERT INTO PAINTING (PAINTING_ID, PAINTING_TITLE, 
ESTIMATED_PRICE, ARTIST_ID) VALUES (?, ?, ?, ?) [params: 41, 'Sleep', NULL, 41]
SEVERE access.QueryLogger 240: === updated 1 row.
SEVERE access.QueryLogger 250: +++ transaction committed.
</source>
    	</subsection>
    	</subsection>
    </section>
</body>
</document>
