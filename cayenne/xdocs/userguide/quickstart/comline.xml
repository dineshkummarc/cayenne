<document>
<title>User Guide - Quick Start</title>
    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/quickstart/modeler.html</prev>
	<next>/userguide/quickstart/webapp.html</next>
</navigator> 
<body>
    <section name="3. Quick Start">
    	<p><h2><font color="red">WORK IN PROGRESS</font></h2></p>
    	<subsection name="3.2 &quot;Command-line Application&quot; Tutorial">
    	<p>This section shows how to write a simple command-line application
    	using Cayenne. For a more detailed discussion read <a href="../appguide/index.html">"Writing 
    	Cayenne Applications"</a> section. The tutorial follows these steps:
    	
    	<ul>
    		<li><a href="#1">Tutorial Setup.</a></li>
    		<li><a href="#2">Prepare Tutorial Database.</a></li>
    		<li><a href="#3">Create Cayenne Configuration Files.</a></li>
    		<li><a href="#4">Generate Java Code for DataObjects.</a></li>
    		<li><a href="#5">Write Application Code.</a></li>
    		<li><a href="#6">Compile and Run the Application.</a></li>
    	</ul>
    	</p>
    	
       	<subsection name="3.2.1 Tutorial Setup" anchor="1">
       		<p>- Follow the steps outlined in <a href="../install/index.html">Cayenne 
       		installation instructions</a>. In particular, JSDK 1.4 must be installed.
       		</p>
       		
    		<p>- Copy cayenne.jar file that is a part of Cayenne distribution to
    		the JRE extensions directory (normally a directory like $JAVA_HOME/jre/lib/ext) 
    		or make it otherwise accessible in the CLASSPATH of the application.</p>
    		
    		<p>- Create tutorial project directory (further referred to as "project directory") 
    		anywhere on the filesystem. For example:</p>
    		
<source>
# cd somedir
# mkdir cayenne-tutorial
# cd cayenne-tutorial
</source>

    	</subsection>
    	
    	<subsection name="3.2.2 Prepare Tutorial Database" anchor="2">
    		<p>To run this tutorial user must have access to a relational database with 
    		privileges sufficient to perform tables creation, select, insert and update queries. 
    		Run the following script to create test tables (script is tested on MySQL, 
    		but it should be easy to port to any other RDBMS): 
    		<a href="../../tutorial/0/tutorialdb.sql">tutorialdb.sql</a>.</p>
    	</subsection>
    	
    	<subsection name="3.2.3 Create Cayenne Configuration Files" anchor="3">
    		<p>Use CayenneModler tool to create Cayenne configuration files including "cayenne.xml",
    		data map file and data source file.
    		Sample files used for this tutorial can be downloaded from here:
    		
    		<ul>
    			<li><a href="../../tutorial/0/cayenne.xml">cayenne.xml</a></li>
    			<li><a href="../../tutorial/0/datamap.xml">datamap.xml</a></li>
    			<li><a href="../../tutorial/0/driverinfo.xml">driverinfo.xml</a></li>
    		</ul>
    		
    		These XML files should be copied to the project directory. To perform any further
    		modifications to these files, user should open <code>cayenne.xml</code> file
    		in CayenneModeler (after opening a project, select green "datanode" icon on the left). 
    		Of course changes can be done using a simple text editor
    		as well. The following changes may be needed in order to run the tutorial:
    		
    		<ul>
    			<li>if the database used is NOT MySQL, <code>cayenne.xml</code>
    			must be modified to use <code>node adapter</code> for the appropriate database.</li>
    			<li><code>driverinfo.xml</code> must be modified to reflect connection and
    			driver information of the test database.</li>
    		</ul> 
    		</p>
    	</subsection>
    	
    	<subsection name="3.2.4 Generate Java Code for DataObjects" anchor="4">
    		<p>Use CayenneModeler to generate Java classes for DataObjects. Sample generated
    		files that can be used with this tutorial can be found here:
    		
    		<ul>
    			<li><a href="../../tutorial/0/test/_Artist.java">_Artist.java</a></li>
    			<li><a href="../../tutorial/0/test/Artist.java">Artist.java</a></li>
    			<li><a href="../../tutorial/0/test/_Painting.java">_Painting.java</a></li>
    			<li><a href="../../tutorial/0/test/Painting.java">Painting.java</a></li>
    			<li><a href="../../tutorial/0/test/_Gallery.java">_Gallery.java</a></li>
    			<li><a href="../../tutorial/0/test/Gallery.java">Gallery.java</a></li>
    		</ul>
    		
    		Create a subdirectory called "test" under the project directory. Save the source code under
    		this new directory. 
    		</p>    	
    	</subsection>
    	
    	<subsection name="3.2.5 Write Application Code" anchor="5">
    		<p>Create a simple application that uses Cayenne. Here is a sample Java class source code:
    		<a href="../../tutorial/0/test/Main.java">Main.java</a>. Download it and save under "test" directory in project directory.</p>    	
    	</subsection>
    	
    	<subsection name="3.2.6 Compile and Run the Application" anchor="6">
    		<p>Compile the source code (assume that JAVA_HOME variable points to the JSDK 1.4 installation). 
    		On Windows:</p>
<source>
projectdir> %JAVA_HOME%\bin\javac test\*.java
</source>

    		<p>On UNIX:</p>
<source>
projectdir# $JAVA_HOME/bin/javac test/*.java
</source>


			<p>Main tutorial class is "test.Main". It takes a single parameter - a search
			word to look up a gallery by name. It will try to find a matching gallery, then
			create a new artist (Salvador Dali) with a single painting and add this painting 
			to the found gallery. To run the tutorial do something like this (example given for Windows):
			</p>
<source>
projectdir> %JAVA_HOME%\bin\java -classpath . test.Main metro
</source>
			
			<p>If there is a gallery matching search criteria (in our case "Metropolitan Museum of Art"
			would match the word "metro"), the following output will be printed:
			</p>
<source>
SEVERE access.QueryLogger 0: --- will run 1 query.
SEVERE access.QueryLogger 40: SELECT t0.GALLERY_NAME, t0.GALLERY_ID FROM GALLERY t0 
WHERE UPPER(t0.GALLERY_NAME) LIKE UPPER(?) [params: '%metro%']
SEVERE access.QueryLogger 140: === returned 1 row.

Found gallery 'The Metropolitan Museum of Art'.

SEVERE access.QueryLogger 210: --- will run 2 queries.
SEVERE access.QueryLogger 220: INSERT INTO ARTIST (ARTIST_ID, DATE_OF_BIRTH, ARTIST_NAME) 
VALUES (?, ?, ?) [params: 41, NULL, 'Salvador Dali']
SEVERE access.QueryLogger 220: === updated 1 row.
SEVERE access.QueryLogger 230: INSERT INTO PAINTING (PAINTING_ID, PAINTING_TITLE, 
ESTIMATED_PRICE, ARTIST_ID) VALUES (?, ?, ?, ?) [params: 41, 'Sleep', NULL, 41]
SEVERE access.QueryLogger 240: === updated 1 row.
SEVERE access.QueryLogger 250: +++ transaction committed.
</source>
    	</subsection>
    	</subsection>
    </section>
</body>
</document>
