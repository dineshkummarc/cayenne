<document>
<title>User Guide - Quick Start</title>
    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/quickstart/comline.html</prev>
	<next>/userguide/design/index.html</next>
</navigator> 
<body>
    <section name="3. Quick Start">
    	<subsection name="3.3 &quot;Web Application&quot; Tutorial">
		<p>This section shows how to write and a deploy a web application
    	using Cayenne.</p>
    	
    	<ul>
    		<li><strong><a href=
    		"http://objectstyle.org/cayenne/tutorial/cayenne-web-app.tar.gz">Download
    		full tutorial source</a></strong></li>
    	</ul>

   	<p>Tutorial steps:</p>
    	
    	<ul>
    		<li><a href="#1">Tutorial Setup.</a></li>
    		<li><a href="#2">Prepare Tutorial Database.</a></li>
    		<li><a href="#3">Setup Cayenne Configuration Files.</a></li>
    		<li><a href="#4">Create Database Primary Key Support.</a></li>
    		<li><a href="#5">Generate Java Code for DataObjects.</a></li>
    		<li><a href="#6">Compile and Deploy the Application.</a></li>
    	</ul>
    	
       	<subsection name="3.2.1 Tutorial Setup" anchor="1">
       		<p>- Follow the steps outlined in <a href="../install/index.html">Cayenne 
       		installation instructions</a>. In particular, JSDK 1.4 must be installed.
       		</p>
       		
       		<p>- Install a web container. This tutorial was tested with <a href=
    		"http://jakarta.apache.org/tomcat/index.html">Tomcat</a> version 4.0.3.
       		It should work with any other container that is compliant with Servlet 2.3
       		specification (older containers should also work, but you will not be able
       		to use some of ServletConfiguration features discussed below). All
       		references to Tomcat below should apply in some form to other web containers
       		as well.</p>
    		
    		<p>- Unpack downloaded tutorial file (<code>cayenne-cmd-app.tar.gz</code>)
    		anywhere in the filesystem. A new directory named <code>cayenne-web-app</code>
    		will be created. This directory is referred to as "project directory" further in 
    		this tutorial.</p>
    		
    		<p>- Copy <code>cayenne.jar</code> to the <code>WEB-INF/lib</code> subdirectory of 
    		the tutorial project directory.</p>
    		
    		<p> - Doublecheck the JDBC driver installation for the target database. If you haven't installed
    		it already, you may copy the driver jar file to 
       		<code>WEB-INF/lib</code> subdirectory of the tutorial project. Alternatively if you want it to be 
       		shared by all web applications and you are using Tomcat, you may copy it to
       		<code>$CATALINA_HOME/common/lib</code> instead.
       		</p>
       		
    		<p>- Install Struts: 
    		<ul>
    		<li>Download Struts from <a href=
    		"http://jakarta.apache.org/struts/index.html">Jakarta Struts site</a>, unpack it
    		to any convenient directory.</li> 
    		
    		<li>Copy all JAR files distributed with Struts (located in <code>lib</code> subdirectory) to
    		<code>WEB-INF/lib</code> subdirectory of the tutorial project. At the minimum these files
    		are required:
    			<ul>
    		    	<li>commons-beanutils.jar</li>
    		    	<li>commons-collections.jar</li>
    		    	<li>commons-dbcp.jar</li>
    		    	<li>commons-digester.jar</li>
    		    	<li>commons-logging.jar</li>
    		    	<li>commons-pool.jar</li>
    		    	<li>commons-services.jar</li>
    		    	<li>commons-validator.jar</li>
    		    	<li>struts.jar</li>
    			</ul>    		
    		</li>
    		
    		<li>Copy the following Struts configuration files from Struts <code>lib</code> subdirectory 
    		to <code>WEB-INF</code> subdirectory of the tutorial project:
				<ul>
    		    	<li>struts-bean.tld</li>
    		    	<li>struts-html.tld</li>
    		    	<li>struts-logic.tld</li>
    		    	<li>struts-nested.tld</li>
    		    	<li>struts-template.tld</li>
    		    	<li>validator-rules.xml</li>
    			</ul>    
    		</li>
    		</ul>
    		
    		Tutorial was testsed with Struts 1.1b1, earlier versions of Struts will most 
    		likely require a different setup.</p>
    	</subsection>
    	
    	<subsection name="3.2.2 Prepare Tutorial Database" anchor="2">
    		<p>Run <a href="../../tutorial/cayenne-web-app/tutorialdb.sql"><code>tutorialdb.sql</code></a>
    		script located in the project directory to create test tables. 
    		This script is tested on MySQL, but it should be easy to port to any other RDBMS. Also
    		note that if you already tried "Command Line Application" tutorial in
    		this chapter, you may already have tables with the same names in your database.
    		In this case you may uncomment "DROP TABLE..." statements in the beginning
    		of this script to recreate tables from scratch.</p>
    	</subsection>
    	
    	<subsection name="3.2.3 Setup Cayenne Configuration Files" anchor="3">
    		<p>Configuration files included in this tutorial are:
    		
    		<ul>
    			<li><a href="../../tutorial/cayenne-cmd-app/cayenne.xml">cayenne.xml</a></li>
    			<li><a href="../../tutorial/cayenne-cmd-app/datamap.xml">datamap.xml</a></li>
    			<li><a href="../../tutorial/cayenne-cmd-app/driverinfo.xml">driverinfo.xml</a></li>
    		</ul>
    		
    		Open <code>cayenne.xml</code> 
    		file in CayenneModeler and make the following changes:
    		<ul>
    			<li>if the database used is NOT MySQL, <code>cayenne.xml</code>
    			must be modified to use an adapter for the appropriate database.</li>
    			<li><code>driverinfo.xml</code> must be modified to reflect connection and
    			driver information of the test database.</li>
    		</ul>         	
    		</p>
    	    <img src="/images/tutorial-cfg-node.gif" width="639" height="503" border="0" align="middle"
			alt="Configure Node Panel"/>
    	</subsection>
    	
    	
    	<subsection name="3.2.4 Create Database Primary Key Support." anchor="4">
    	<p>Open <code>cayenne.xml</code> in CayenneModeler and generate needed database
    	objects for primary key support by following these  
    	<a href="../modeler/pksupport.html">instructions</a>. Skip this step if it was already 
    	done for another tutorial.</p>
    	</subsection>
    	
    	<subsection name="3.2.5 Generate Java Code for DataObjects" anchor="5">
    		<p>Open <code>cayenne.xml</code> in CayenneModeler and generate Java classes 
    		for DataObjects by going to <strong>"Tools -> Generate Classes"</strong> 
    		and selecting the <strong><code>WEB-INF/classes</code></strong> under the tutorial 
    		project directory in the opened popup:</p>
    		<img src="/images/classgen.gif" width="546" height="489" border="0" align="middle"
			alt="Generate Classes Dialog"/>
			
    		<p>Click <strong>"Generate"</strong> button. After the generation 
    		is done, the following files should appear in the 
    		<code><code>WEB-INF/classes/test</code></code> subdirectory of the 
    		project directory:
    		
    		<ul>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/_Artist.java">_Artist.java</a></li>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/Artist.java">Artist.java</a></li>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/_Painting.java">_Painting.java</a></li>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/Painting.java">Painting.java</a></li>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/_Gallery.java">_Gallery.java</a></li>
    			<li><a href="../../tutorial/cayenne-web-app/WEB-INF/classes/test/Gallery.java">Gallery.java</a></li>
    		</ul>
    		</p>    	
    	</subsection>
    	   	<subsection name="3.2.6 Compile and Deploy the Application" anchor="6">
    		<p>Compile the source code lime ypou would normally compile a webapplications.
    		The example is given for javac from the command line (assuming that JAVA_HOME variable 
    		points to the JSDK 1.4 installation). 
    		On Windows (substitute <code>[servlet.jar]</code> with the path to the actiual JAR file,
    		for instance tomcat/common/lib/servlet.jar):</p>
<source>
cayenne-web-app> cd WEB-INF\classes
cayenne-web-app\WEB-INF\classes> set CLASSPATH=%CLASSPATH%;[servlet.jar] 
cayenne-web-app\WEB-INF\classes> set CLASSPATH=%CLASSPATH%;..\lib\struts.jar;..\lib\cayenne.jar
cayenne-web-app\WEB-INF\classes> %JAVA_HOME%\bin\javac test\*.java formbean\*.java action\*.java
</source>

    		<p>On UNIX:</p>
<source>
cayenne-web-app# cd WEB-INF/classes
cayenne-web-app# export CLASSPATH=$CLASSPATH:[servlet.jar]:../lib/struts.jar:../lib/cayenne.jar
cayenne-web-app# $JAVA_HOME/bin/javac test/*.java formbean/*.java action/*.java
</source>

			<p>To deploy, simply copy <code>cayenne-web-app</code> directory to Tomcat 
			<code>webapps</code> directory and restart the Tomcat. URL of the new applications
			is <a href=
			"http://localhost:8080/cayenne-web-app/">http://localhost:8080/cayenne-web-app/</a>
			(on containers other then Tomcat, this will be different).
			</p>
    	</subsection>
    	</subsection>
    </section>
</body>
</document>
