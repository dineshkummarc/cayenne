<document>
<title>User Guide - Using Expressions</title>
<toc name="toc-user-guide" chapter="10. Using Expressions"/>  
<body>
    <section name="10. Using Expressions">        
		<subsection name="10.1 Building Expressions">
		<p>There is a generic way to build any semantically valid 
		Cayenne expression.	Internally all expressions are categorized by the 
		number of operands as unary, binary, and ternary. <a href=
        "../../api/cayenne/org/objectstyle/cayenne/exp/ExpressionFactory.html">ExpressionFactory
        class</a> provides a generic way to build an expression of any
        of the above types, based purely on expression semantics, not on their meaning.
		</p>
		
		<ul>
            <li>public static Expression <b>unaryExp</b>(int type, Object operand)<br/>
            Creates a single-operand expression.
            <p></p>
            </li>
            		
            <li>public static Expression <b>binaryExp</b>(int type, Object leftOperand, Object rightOperand)<br/>
            Creates an expression with two operands.
            <p></p>
            </li>
            
            <li>public static Expression <b>ternaryExp</b>(int type, 
                Object firstOperand, Object secondOperand, Object thirdOperand)<br/>
            Creates an expression with three operands.
            <p></p>
            </li>
        </ul>
        
        <p>All three methods above will check whether the expression type parameter corresponds 
        to the expression with the specified number of operands. If not, an ExpressionException
        is thrown. Expressions themselves can be other expression's operands. This allows to
        build complex expression trees.</p>
        
        <panel name="Note:">
        The API discussed above is rarely used directly. 
		Instead ExpressionFactory provides a simplified type-safe API discussed in the 
		following chapters.
		</panel>         	
		</subsection>
    </section>
</body>
</document>