<document>
<title>User Guide - Using Expressions</title>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/expressions/path.html</prev>
	<next>/userguide/expressions/nulls.html</next>
</navigator>    
<body>
    <section name="10. Using Expressions">        
		<subsection name="10.3 Simplified Expression API">
		<p>Building expressions using previously described techniques is not intuitive,
		requires lots of code, and is error-prone. For most real-life cases Cayenne provides
		simpler and cleaner API discussed in this chapter.
		</p>
		
		<subsection name="10.3.1 Path/Value Expressions">
		<p>The most simple expressions are the ones that match an object property
		(or more commonly - object property path) with a value or a list of values. 
		ExpressionFactory provides a set of methods to build such "path/value" expressions:</p>
		
		<ul>
        	<li>public static Expression <b>matchExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>noMatchExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>matchDbExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>lessExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>lessOrEqualExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>greaterExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>greaterOrEqualExp</b>(String pathSpec, Object value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>inExp</b>(String pathSpec, Object[] values)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>inExp</b>(String pathSpec, java.util.List values)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>betweenExp</b>(String pathSpec, Object value1, Object value2)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>likeExp</b>(String pathSpec, String value)<br/>
            <p></p>
            </li>
            
            <li>public static Expression <b>likeIgnoreCaseExp</b>(String pathSpec, String value)<br/>
            <p></p>
            </li>
        </ul>		
		</subsection>
		
		<subsection name="10.3.2 Chanining Expressions">
		<p>Expression class itself provides a set of convenience methods to chain expressions
		as they are built from smaller parts. Note that each of these methods does not modify
		the original expression, rather it builds and returns a new instance of the expression.</p>
		
		<ul>
            <li>public Expression <b>joinExp</b>(int type, Expression exp)<br/>
            		Creates and returns a new expression that joins this object with another 
            		expression, using specified join type. This is a shorter equivalent of
            		<code>ExpressionFactory.binaryExpression(type, this, exp)</code>.
            		<p></p>
            		</li>
            		
            		<li>public Expression <b>andExp</b>(Expression exp)<br/>
            		A shorter equivalent for <code>joinExp(Expression.AND, exp)</code>.
            		<p></p>
            		</li>
            		
            		<li>public Expression <b>orExp</b>(Expression exp)<br/>
            		A shorter equivalent for <code>joinExp(Expression.OR, exp)</code>.
            		<p></p>
            		</li>
            	</ul>
            	
            	<p>Example of using chaining:</p>
<source>import org.objectstyle.cayenne.exp.Expression;
import org.objectstyle.cayenne.exp.ExpressionFactory;
import org.objectstyle.cayenne.query.SelectQuery;
...

// find artists whose name starts with "D"
// with invalid or null date of birth

Expression qual = 
   ExpressionFactory.greaterOrEqualExp("dateOfBirth", new Date());
   
// 1. chain expressions, note the assignment back to "qual", 
// since a new instance is created
qual = qual.orExp(ExpressionFactory.matchExp("dateOfBirth", null));

// 2. "AND" applies to a combined earlier criteria
qual = 
   qual.andExp(ExpressionFactory.likeIgnoreCaseExp("artistName", "D%"));
    
SelectQuery select = new SelectQuery(Artist.class, qual);
</source>
			</subsection>
			
			<subsection name="10.3.3 Creating Complex Expressions">
			<p>There is a way to create complex expressions either from the 
			Lists of expressions or from the Maps containing values using "path" Strings
			as keys. This approach significantly simplifies connecting Cayenne queries
			to the UI, and reduces the number of steps needed to create expressions
			in other cases. ExpressionFactory provides the following methods:
			</p>
			
			<ul>
			 	<li>public static Expression <b>joinExp</b>(int type, java.util.List expressions)<br/>
			 	Joins all expressions into a single expression. type is used as an expression type 
			 	for expressions joining each one of the items on the list. 
			 	type is normally AND or OR.
            	<p></p>
            	</li>
            	
                <li>public static Expression <b>matchAllExp</b>(java.util.Map map, int type)<br/>
			 	Creates an expression that matches all path/value pairs in map. Path is OBJ_PATH.
            	<p></p>
            	</li>
            	
            	<li>public static Expression <b>matchAllDbExp</b>(java.util.Map map, int type)<br/>
			 	Same as above, but path is interpreted to be DB_PATH.
            	<p></p>
            	</li>
            	
            	<li>public static Expression <b>matchAnyExp</b>(java.util.Map map, int type)<br/>
			 	Creates an expression that matches any of the path/value pairs in map. Path is OBJ_PATH.
            	<p></p>
            	</li>
            	
            	<li>public static Expression <b>matchAnyDbExp</b>(java.util.Map map, int type)<br/>
			 	Same as above, but path is interpreted to be DB_PATH.
            	<p></p>
            	</li>
			</ul>
			
			</subsection>
		</subsection>
    </section>
</body>
</document>