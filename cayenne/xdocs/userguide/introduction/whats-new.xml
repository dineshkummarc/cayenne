<document>
<title>User Guide - Introduction</title>
<toc name="toc-user-guide" chapter="1. Introduction"/>
<body>
    <section name="1. Introduction">     
        <subsection name="1.1 What's New in 1.1">
        	<p>This page lists all new features and changes relevant to Cayenne users, that were introduced 
        	in 1.1 release:</p>
        	
        	<subsection name="1.1.1 Additions to cayenne.xml Format.">
            <p>Be careful - saving Cayenne projects with Modeler 1.1 will render them uneditable with Modeler 1.0.</p>
            </subsection>
            
        	<subsection name="1.1.2 Advanced Local and Distributed Caching">
            <p>Cayenne now provides a way to share its object cache between DataContexts in the same
            JVM and across JVMs. The following chapters in the user guide describe this feature:</p>
            
            <ul>
           	 	<li><a href="../design/dataobjects-datarows.html">How Information Is Stored in Cayenne</a></li>
            	<li><a href="../design/caching.html">Understanding Caching</a></li>
            </ul>
            </subsection>
            
            <subsection name="1.1.3 Data Views and DVModeler">
            <p><a href="../dataview/index.html">Data Views</a> is a completely new addition to Cayenne. 
            This is a framework and a Swing modeler tool to quickly build Swing applications based on Cayenne.</p>
            </subsection>
            
            <subsection name="1.1.4 Generic Multithreaded and Distributed Events Mechanism">
            <p>Cayenne now includes a <a href="../design/events.html">powerful generic package</a> 
            "org.objectstyle.cayenne.event" for registering listeners 
            and sending events, both locally and remotely. It supports both blocking and non-blocking
            listeners and dispatches. Supported remote transports include JMS and JavaGroups.</p>
            </subsection>
            
            <subsection name="1.1.5 DataObjects Validation">
            <p>DataContext now performs validation of DataObjects before committing them.
            There is a set of default validation checks being executed, based on the DataMap
            information. Developers can override DataObject validation methods to provide custom validation
            checks.</p>
            
            <p>See user guide <a href="../dataobjects/validation.html">chapter on object validation</a>.</p>
            
            <p>Original implementation was submitted by Fabricio Voznika.</p>
            </subsection>
            
            <subsection name="1.1.6 SnapshotEvents">
            <p></p>
            </subsection>
            
            <subsection name="1.1.7 DataContextDelegate">
            <p></p>
            </subsection>
            
            <subsection name="1.1.8 Explicit Transaction API and Container Managed Transactions">
            <p>Cayenne now supports container-managed transactions. As a result it can be used inside EJBs
            out of the box. It also allows a high degree of transactions customization. The following user guide 
            chapter explains Transactions design and behavior in details:</p>
            
            <ul>
            <li><a href="../design/transactions.html">Understanding Transactions</a></li>
            </ul>
            </subsection>
            
            <subsection name="1.1.9 Lazy Relationship Creation">
            <p></p>
            </subsection>
            
            <subsection name="1.1.9 OpenBase Adapter">
            <p>A dedicated adapter is implemented for OpenBase DB Engine.</p>
            </subsection>
            
            <subsection name="1.1.10 SQL Server Adapter">
            <p>A dedicated adapter is implemented for MS SQL Server Engine.</p>
            </subsection>
            
            <subsection name="1.1.11 New Default CayenneModeler Look and Feel">
            <p></p>
            </subsection>
            
            <subsection name="1.1.12 Non-refreshing Select Queries">
            <p></p>
            </subsection>
            
            <subsection name="1.1.13 CayenneModeler Support for Custom Class Templates.">
            <p></p>
            </subsection>
            
            <subsection name="1.1.14 CayenneModeler Support for UI Customizable Classpath for Jars.">
            <p></p>
            </subsection>
            
            <subsection name="1.1.15 CayenneModeler ObjRelationship Mapping Dialog Redesign.">
            <p>A dialog used to select mapping of ObjRelationship to one DbRelationship (simple relationship)
            or to a series of DbRelationships (flattened relationship) had arbitrary limitations on what path 
            can be selected. This dialog has been completely redesigned to remove this limitation.</p>
            </subsection>
            
            <subsection name="1.1.16 CayenneModeler Productivity Enhancements.">
            <p>CayenneModeler now uses defaults where appropriate when working with mappings. This is
            to reduce manual operations. Some examples are:
            </p>
            <ul>
            <li>When ObjRelationship target is selected, Modeler guesses underlying DbRelationship if
            source and target entities can be connected in one step.</li>
            </ul>
            </subsection>
        </subsection>
    </section>
</body>
</document>
