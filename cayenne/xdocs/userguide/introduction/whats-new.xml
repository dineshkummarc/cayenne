<document>
	<title>User Guide - Introduction</title>
	<toc name="toc-user-guide" chapter="1. Introduction"/>
	<body>
		<section name="1. Introduction">
			<subsection name="1.1 Guide to 1.2 Features">
				<p></p>
				<subsection name="1.1.1 DTD Additions.">
					<p>Latest "cayenne.xml" and "*.map.xml" DTD's are located 
						here:</p>
					<ul>
						<li>
							<a href="../../dtd/cayenne-project-1_1.dtd"> 
								cayenne-project-1_1.dtd</a>
						</li>
						<li>
							<a href="../../dtd/cayenne-data-map-1_2.dtd"> 
								cayenne-data-map-1_2.dtd</a>
						</li>
					</ul>
				</subsection>
				<subsection name="1.1.2 Support for 'generated' columns">
					<p>Some databases support "auto increment" or "identity" 
						columns, normally used for auto-generation of primary 
						keys at the database level. Support for them (and even 
						term used for this feature) varies across RDBMS.</p>
					<p> In 1.2 Cayenne DbAttribute (i.e. table column 
						descriptors) has a new boolean property - "generated". 
						It tells Cayenne that a column value is expected to be 
						set by the database during INSERT.</p>
				</subsection>
				<subsection name="1.1.3 WebApplicationContextFilter">
					<p>A Servlet Specification 2.3 compatible way to bind 
						DataContext to the request thread. More information can 
						be found <a href="../deploy/webapplicationcontextfilter.html">here</a>.</p>
				</subsection>
				<subsection name="1.1.4 DBCPDataSourcefactory: DBCP Pool Support">
					<p>A connection pool from jakarta-commons DBCP project is 
						now supported via the modeler - just select 
						DBCPDataSourceFactory from the DataSource factories 
						dropdown. The new factory loads its configuration from 
						a specified properties file (see <a 
						href="../../api/cayenne/org/objectstyle/cayenne/conf/DBCPDataSourceFactory.html">DBCPDataSourcefactory 
						Javadocs</a> for supported properties). DBCP connection 
						pool is much more advanced than the one provided by 
						Cayenne and supports a dozen or so runtime 
						parameters.</p>
				</subsection>
				<subsection name="1.1.5 cdbgen: Ant DbGenerator">
					<p>Ant task to generate a database from Cayenne DataMap: <a href="../ant/cdbgen.html">cdbgen</a>.</p>
				</subsection>
				<subsection name="1.1.6 Joint Prefetches">
					<p>SQLTemplate and SelectQuery support a new type of 
						prefetches - "joint" prefetches that are retrieved as a 
						part of the main query. Joint prefetches have public 
						API similar to the "regular" ones (e.g.: 
						query.addJointPrefetch("toArtist")). Joint prefetches 
						support all types of relationships including flattened. 
						See <a 
						href="http://objectstyle.org/confluence/display/CAY/Joint+Prefetches">Joint 
						Prefetches Wiki page</a> for more information until more 
						documentation is included in the User Guide.</p>
				</subsection>
				<subsection name="1.1.7 DataContext User Properties Map">
					<p>DataContext now maintains an internal map of 
						user-defined values. This allows users to associate 
						certain data with a given DataContext.</p>
				</subsection>
				<subsection name="1.1.8 Support For Custom Encoding Of Generated Java Files">
					<p>Desired encoding for generated Java files can be 
						specified in the Modeler in Preferences and as an 
						"encoding" attribute of the cgen Ant task. This is helpful 
						in cross-platform development situations.</p>
				</subsection>
				<subsection name="1.1.9 Antlib descriptor of Cayenne Ant Tasks">
					<p>cayenne.jar ships with an Antlib descriptor to simplify importing Cayenne
						Ant tasks into a build file. Read more about this <a 
						href="../ant/antlib.html">in the Ant chapter</a>.</p>
				</subsection>
				<subsection name="1.1.10 Various Modeler Improvements.">
					<p></p>
				</subsection>
			</subsection>
		</section>
	</body>
</document>