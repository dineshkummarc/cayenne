<document>
<title>User Guide - Writing Cayenne Applications</title>

    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/modeler/runmodeler.html</prev>
	<next>/userguide/modeler/mapschema.html</next>
</navigator>
<body>
    <section name="6. CayenneModeler GUI Tool">
 	<subsection name="6.3. Concepts and Terminology" anchor="concepts">
		<p>
			CayenneModeler is a GUI tool for creating the data access classes
			and associated data model.
			This section describes the techniques of its use as well as the
			deployment
			of the files it produces.
			Before we start describing how to create Cayenne data model with the
			Modeler,
			let us introduce core concepts of this model.
		</p>
		<table width="100%" border="1">
		<tr valign="top">
			<th width="28%">Cayenne mapping concept</th>
			<th width="78%">Definition</th>
		</tr>
		<tr valign="top">
			<td>DbEntity</td>
			<td>Database table or view.</td>
		</tr>
		<tr valign="top">
			<td>DbAttribute</td>
			<td>Column of the database table or view.</td>
		</tr>
		<tr valign="top">
			<td>DbRelationship</td>
			<td>PK-FK relationship between two database tables.</td>
		</tr>
		<tr valign="top">
			<td>ObjEntity</td>
			<td>Java data access class. Normally includes a reference to the
				underlying database table (DbEntity).
			</td>
		</tr>
		<tr valign="top">
			<td>ObjAttribute</td>
			<td>Java class property (a pair of set/get methods).
				May include reference to the underlying database column (DbAttribute)
			</td>
		</tr>
		<tr valign="top">
			<td>ObjRelationship</td>
			<td>A relationship between two persistent Java classes. 
			In the java class modeled as a pair of set/get methods for
			the relationship destination object.
		    May include reference to the underlying relationship
		    between database tables (DbRelationship). 
			</td>
		</tr>
		<tr valign="top">
			<td>DataMap</td>
			<td>Collection of the entities, attributes and relationships (Db and
			Obj) describing a mapping of a set of database tables to a
			set of Java classes.
			</td>
		</tr>
		<tr valign="top">
			<td>DataNode</td>
			<td>Description of a single physical data source, normally a database.
			    Currently there are two types of DataNodes:<br/>
				<strong>JNDI-based</strong> - node accessible via
				JNDI DataSource provided by the container (e.g. your WebLogic or Tomcat server).<br/>
				<strong>JDBC Driver-based</strong> - node accessible using provided
				JDBC connection information. In this case Cayenne will provide its own pooling 
				facilities using configured JDBC driver.
			</td>
		</tr>
		<tr valign="top">
			<td>DataDomain</td>
			<td>Virtual data source.
				Cayenne's way to treat multiple databases as if they are a single
				data source. Each domain contains data maps and data nodes. Most
				projects will need only a single domain.
			</td>
		</tr>
		<tr valign="top">
			<td>Project</td>
			<td>A collection of domains used together. As mentioned earlier, normally 
			only a single domain is used, but there may be cases (Application Service
			Provider applications, for instance) when more than one domain may be desirable.</td>
		</tr>
		</table>

		<br/><br/>
		<p>
		The Cayenne data model is created as a set of the .xml file.
		Here are the types of files it may have:
		</p>

		<table>
		<tr valign="top">
			<th>Type of file</th>
			<th>Description</th>
		</tr>
		<tr>
			<td>Project file</td>
			<td>One per project.
				Contains all the domains for the project.
				Always called <strong>cayenne.xml</strong>.
				Located in the project directory.
				All other files are located under project directory.
				All paths used in this and other files are relative to the
				project directory.
			</td>
		</tr>
		<tr>
			<td>DataNode file</td>
			<td>One per JDBC Driver-based DataNode
				(see earlier in the section definitions of JDBC Driver-based and JNDI DataNodes).
				JNDI data node information, as well as data node to data map
				association
				is stored directly in the project file.
			</td>
		</tr>
		<tr>
			<td>DataMap file</td>
			<td>One per data map.</td>
		</tr>
		</table>

		<p>
		CayenneModeler supports three scenarios of use:
		<ol>
		<li>	Creating the Data Map and generating database schema from it</li>
		<li>	Using existing database schema to create Data Map </li>
		<li>	Combination of 1 and 2. </li>
		</ol>
		This document will concentrate on scenarios 1 and 2.
		</p>
		</subsection>
    </section>
</body>
</document>





