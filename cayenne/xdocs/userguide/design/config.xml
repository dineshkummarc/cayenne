<document>
<title>User Guide - Design</title>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/design/autopk.html</prev>
	<next>/userguide/appguide/index.html</next>
</navigator>
<body>
    <section name="4. Design">
       <subsection name="4.8 Configuration" anchor="config">
            <p>Central piece in Cayenne configuration is 
            <a href="../../api/cayenne/org/objectstyle/cayenne/conf/Configuration.html">Configuration</a>
            class. It creates DataDomain objects used later to access the database. Database
            access is configured based
            on the data found in Cayenne configuration files.
            By default Configuration uses singleton model, i.e. normally there is only one 
            instance of Configuration (or its subclass) that exists in the application. This
            shared instance can be accessed via a static method like that:
            </p>
            
<source>import org.objectstyle.cayenne.conf.Configuration;
...           
Configuration conf = Configuration.getSharedConfig();
</source>
            <p>By default shared object returned will be an instance of 
            <a href="../../api/cayenne/org/objectstyle/cayenne/conf/DefaultConfiguration.html">DefaultConfiguration</a>.
            Sometimes an additional line of code is needed for it to find application configuration files
            jarred with the application. This normally happenes when cayenne.jar is placed in extensions
            directory ($JRE_HOME/lib/ext) and application is run from the CLASSPATH location. This code is 
            normally NOT needed when both cayenne.jar and application are loaded from the CLASSPATH
            or when some of the custom Configuration subclasses are used, as described below.
            </p>

<source>import org.objectstyle.cayenne.conf.Configuration;
...      
// need this when Cayenne is coming from
// a different ClassLoader
Configuration.bootstrapSharedConfig(MyClass.class);
     
Configuration conf = Configuration.getSharedConfig();
</source>            
          
            
            <p>A user can create her own subclass of Configuration and use it instead. 
            Custom subclasses are usually created to load configuration files from 
            non-standard locations, as well as to automatically 
            configure Cayenne during different events that happen in deployment containers.
            For example, in addition to DefaultConfiguration, Cayenne framework provides
            <a href="../../api/cayenne/org/objectstyle/cayenne/conf/ServletConfiguration.html">ServletConfiguration</a>
            class that is able to configure Cayenne when a web application is started
            and locates resources relative to WEB-INF directory
            of a deployed web application. More information on the types and locations of configuration 
            files can be found in 
            <a href="../../userguide/appguide/deploy.html">Deployment Chapter</a>.
            </p>
            
            <p>To make sure Cayenne 
            uses configuration object of the right class, you should add the following code
            somewhere in the application before any calls to Configuration where made: 
            </p>
            
<source>import org.objectstyle.cayenne.conf.Configuration
...
String myConfigSubclass = "my.package.ConfigSubclass";
Configuration.initSharedConfig(myConfigSubclass);
</source>
  
            <p>After that any subsequent calls to "getSharedConfig" will return an instance of your 
            class instead of DefaultConfiguration.
            </p>
        </subsection>
    </section>
</body>
</document>
