<document>
<title>User Guide - Design</title>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/design/access.html</prev>
	<next>/userguide/design/crossdb.html</next>
</navigator>
<body>
    <section name="3. Design" toc="/userguide/index.html">
        <subsection name="3.4 Cayenne DataSource" anchor="connect">
        
        	<p>Cayenne is designed to work with any javax.sql.DataSource implementation. 
        	When Cayenne applications are deployed in containers (Web, EJB, etc.), DataSource
        	would normally be obtained from the container (see deployment section). 
        	
        	<strong>However 
        	Cayenne provides full implementation of DataSource functionality of it own, 
        	including connection pooling. This allows to deploy standalone 
        	Cayenne applications, as well as to use containers that don't supports JNDI 
        	DataSource mapping. Cayenne DataSource can also be used as a container-provided 
        	DataSource, even
        	when the main part of the Cayenne functionality is not used.</strong> 
        	For example it can be used as a DataSource implementation
            of Tomcat web container. <i>(For a sample configuration follow 
            <a href="../appguide/deploy.html#web">this link</a>, then scroll down to the sample
            server.xml configuration file.)</i>
        	</p>
            
            <p>Cayenne DataSource is implemented in <a href=
            "../../api/org/objectstyle/cayenne/conn/package-summary.html">org.objectstyle.cayenne.conn</a>
            package. The following class diagram shows how Cayenne connection package classes
        	(shown in light blue) implement java.sql and javax.sql interfaces 
        	(shown in yellow) to provide DataSource 
        	with connection pooling. </p>
        	
        	<img src="/images/conn-chart.gif" alt="DataSource Implementation Diagram"/>
        	
        	<p>Normally instances of <a href=
        	"../../api/org/objectstyle/cayenne/conn/PoolManager.html">PoolManager</a>
        	class serve as a publicly accessible DataSource objects. They use 
        	<a href="../../api/org/objectstyle/cayenne/conn/PoolDataSource.html">PoolDataSource</a>
            internally as a factory of PooledConnections. Each 
        	<a href="../../api/org/objectstyle/cayenne/conn/PooledConnectionImpl.html">PooledConnectionImpl</a> 
        	produces a JDBC Connection object that is used to connect to the database.
        	JDBC Connections are returned to the user as   
        	<a href="../../api/org/objectstyle/cayenne/conn/ConnectionWrapper.html">ConnectionWrapper</a> 
        	objects that delegate all database operations to the underlying connection 
        	and notify parent PooledConnection about SQLExceptions.	
        	</p>
        </subsection>
        
    </section>
</body>
</document>
