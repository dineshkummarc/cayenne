<document>
<title>User Guide - Design</title>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/design/dataobj.html</prev>
	<next>/userguide/design/access.html</next>
</navigator>
<body>
    <section name="4. Design">
       <subsection name="4.4 Select Queries: Retrieving Objects" anchor="query">
            <p>To give users access to the existing database data, Cayenne
            provides extensive query API. Queries in Cayenne are Java objects
            that create abstraction independent from SQL dialect used by the
            target database. SQL queries not covered by Cayenne can also be performed. 
            This is done using wrappers around SQL statements (<a href=
            "../../api/cayenne/org/objectstyle/cayenne/query/SqlSelectQuery.html">SqlSelectQuery</a>
            and <a href=
            "../../api/cayenne/org/objectstyle/cayenne/query/SqlModifyQuery.html">SqlModfyQuery</a>).
            </p>
            
            <subsection name="4.4.1 Cayenne Select Queries">
            <p>To fetch a list of objects from the database, a <a href=
            "../../api/cayenne/org/objectstyle/cayenne/query/SelectQuery.html">SelectQuery</a>
            must be created. It consists of a root entity, qualifier expression and orderings list.
            Here is a logical correspondence of Cayenne SelectQuery parts and 
            SQL constructs:
            </p>
            
            <table>
            	<tr>
            		<th>Cayenne SelectQuery</th>
            		<th>SQL SELECT statement</th>
            	</tr>
            	<tr>
            		<td>Root Entity</td>
            		<td>FROM clause</td>
            	</tr>
             	<tr>
            		<td>Qualifier Expression</td>
            		<td>WHERE clause</td>
            	</tr>
            	<tr>
            		<td>Orderings</td>
            		<td>ORDER BY clause</td>
            	</tr>
            </table>
            <p>
            The only required query part is root entity:
            </p>
            
<source>import org.objectstyle.cayenne.query.SelectQuery;
...
// this is a valid Cayenne query that would allow to fetch
// all records from the ARTIST table as Artist objects
SelectQuery query = new SelectQuery("Artist");
</source>
		</subsection>
		
		<subsection name="4.4.2 Qualifiers">
			<p>Of course in the real life situations programmers would need a more fine-grained
			control of what objects should be retrieved from the database. In this
			case qualifier expression should be used. Qualifier is an instance of
			a class implementing <a href=
            "../../api/cayenne/org/objectstyle/cayenne/exp/Expression.html">Expression interface</a>.
			The easiest way to build valid expressions is by using <a href=
            "../../api/cayenne/org/objectstyle/cayenne/exp/ExpressionFactory.html">ExpressionFactory
            class</a>. Extending the previous example, the following code builds a query  
            that would tell Cayenne to fetch artists that have a name that starts with "A"
            ignoring case:
			</p>
			
<source>import org.objectstyle.cayenne.query.SelectQuery;
import org.objectstyle.cayenne.exp.Expression;
import org.objectstyle.cayenne.exp.ExpressionFactory;
...
SelectQuery query = new SelectQuery("Artist");
Expression qualifier 
   = ExpressionFactory.binaryPathExp(Expression.LIKE_IGNORE_CASE, "artistName", "a%");
query.setQualifier(qualifier);
</source>

   			<p>Note that we are using a method "binaryPathExp" to create an expresion.
   			"Binary" indicates the fact that the target expression has two operands.
   			"Path" indicates that second argument, the left hand operand of a binary expression ("artistName"),
   			will be converted to a "path expression" - expression of type <a href=
            "../../api/cayenne/org/objectstyle/cayenne/exp/Expression.html#OBJ_PATH">Expression.OBJ_PATH</a>.
            This is a special type of expressions that allows to specify attributes and related entities
            relative to the query root entity. So in this example "artistName" when resolved relative 
            to the entity "Artist" is just an attribute of "Artist". More complex path expressions
            may include relationships to other entities and their attributes. Path components are
            separated by the "." character:</p>
            
<source>import org.objectstyle.cayenne.query.SelectQuery;
import org.objectstyle.cayenne.exp.Expression;
import org.objectstyle.cayenne.exp.ExpressionFactory;
...
SelectQuery query = new SelectQuery("Artist");

// Will match all artists that have paintings displayed in a Metropolitan Museum
Expression qualifier 
   = ExpressionFactory.binaryPathExp(Expression.EQUALS_TO, 
                                     "paintingArray.toGallery.galleryName", 
                                     "Metropolitan Museum");
query.setQualifier(qualifier);
</source>           
            
            <p>Of course 3rd argument to binaryPathExp (right hand operand) does not 
            have to be a String.
            It can be any object that has the same type as the destination of the object path.
            It can be a number, a date, or even another DataObject. The last case is demonstrated
            in the example below:
            </p>
            
<source>import org.objectstyle.cayenne.query.SelectQuery;
import org.objectstyle.cayenne.exp.Expression;
import org.objectstyle.cayenne.exp.ExpressionFactory;
...

// assume this exists
Gallery metroGallery;

SelectQuery query = new SelectQuery("Artist");

// Will match all artists that have paintings displayed in a Metropolitan Museum
// Note that the last component of the object path expression
// is a relationship name, not an attribute like in previous examples:
Expression qualifier 
   = ExpressionFactory.binaryPathExp(Expression.EQUALS_TO, 
                                     "paintingArray.toGallery", 
                                     metroGallery);
query.setQualifier(qualifier);
</source>                  
            
            </subsection>
            
            <subsection name="4.4.3 Orderings">
            <p>To sort query results returned from the database 
            server, orderings are used. Orderings use path expressions 
            discussed in the previous section to identify the attributes 
            that must be used in sorting. For example to order results by
            artist name, the following code can be used:
            </p>
            <source>import org.objectstyle.cayenne.query.SelectQuery;
import org.objectstyle.cayenne.exp.Expression;
import org.objectstyle.cayenne.exp.ExpressionFactory;
...
SelectQuery query = new SelectQuery("Artist");
Expression qualifier 
   = ExpressionFactory.binaryPathExp(Expression.EQUALS_TO, 
                                     "paintingArray.toGallery.galleryName", 
                                     "Metropolitan Museum");
query.setQualifier(qualifier);

// add ordering by Artist name:
query.addOrdering("artistName", true);
</source>    
            </subsection>
        </subsection>
    </section>
</body>
</document>
