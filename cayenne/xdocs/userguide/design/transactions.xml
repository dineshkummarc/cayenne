<document>
<title>User Guide - Design</title>
<toc name="toc-user-guide" chapter="4. Design"/>
<body>
    <section name="4. Design">
        <subsection name="4.10 Cayenne Transactions">
            <p>Cayenne transaction API allows to control transactional behavior in different deployment environments.
             Cayenne can be configured to commit its own transactions or to rely on container-managed transactions, as <a href=
             "../../modelerguide/configure-deployment/configure-transactions.html">described in the Modeler Guide</a>. In 
             addition, users are allowed to customize transactions.
            </p>
            
            <subsection name="4.10.1 Transactional Behavior">
            <p>Transaction control in Cayenne is done via instances of <a href=
			"../../api/cayenne/org/objectstyle/cayenne/access/Transaction.html">Transaction</a>
            class.</p>
            
            <p><strong>Transactions at the application level - DataContext behavior.</strong> Whenever a select or
            commit operation is initiated, DataContext obtains a new Transaction object by invoking 
            <code>DataDomain.createTransaction()</code> on the parent DataDomain. DataDomain returns a 
            transaction with preconfigured commit behavior. This is defined by the boolean property <code>usingExternalTransactions</code>,
            that can be configured in the Modeler or via API.
            </p>
            
            <p><strong>Transactions at the database level - DataNode behavior.</strong> Transaction is passed to DataNode
            as an argument to <code>DataNode.performQueries(List, OperationObserver, Transaction)</code>. DataNode does
            not attempt to commit or rollback a connection used in the query, rather it adds currently used JDBC Connection
            to the Transaction object by calling <code>Transaction.addConnection(java.sql.Connection)</code>.
            </p>
            </subsection>
            
            <subsection name="4.10.2 User Control over Transactions">
            <p><strong>Explict Transactions.</strong> <a href=
			"../../api/cayenne/org/objectstyle/cayenne/access/QueryEngine.html">QueryEngine interface</a> implemented by 
			DataContext, DataDomain and DataNode, defines "performQueries" method that takes an instance of Transaction
			as one of its arguments. Users can invoke this method with their own subclass of Transaction.
			</p>
			
			<panel name="Explicit Transactions Note:">
			When calling "QueryEngine.performQueries(Collection, OperationObserver, Transaction)", it is always a caller responsibility to
			invoke "begin/commit/rollback" methods. Cayenne will only add the JDBC connections involved in the transaction to the Transaction
			object, but will not attempt to alter its state.
			</panel>
			
           <p><strong>TransactionDelegate.</strong> To further customize Cayenne transactions behavior, Cayenne provides 
           special public hooks in the form of <a href=
			"../../api/cayenne/org/objectstyle/cayenne/access/TransactionDelegate.html">TransactionDelegate</a> interface. A delegate can be
			set per DataDomain, e.g.:</p>
<source>
// on startup
DataDomain defaultDomain = Configuration.getDomain();
defaultDomain.setTransactionDelegate(new CustomTransactionDelegate());
</source>

			<p>TransactionDelegate implements a set of methods that are called during transaction processing. All methods that have a boolean 
			return type allow the delegate to suppress default transaction processing by returning <code>false</code>, thus preventing Cayenne 
			from interfering with container
			TransactionManager. 
            </p>
            </subsection>
        </subsection>
    </section>
</body>
</document>
