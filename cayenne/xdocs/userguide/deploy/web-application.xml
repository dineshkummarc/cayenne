<document>
<title>User Guide - Deployment</title>
<toc name="toc-user-guide" chapter="13. Deployment"/>
<body>
     <section name="13. Deployment">
           
           <subsection name="13.2 Web Applications" anchor="web">
               <p>When deploying an application in a web container, it is still possible 
               to use the procedure described for the standalone applications. Just make sure that
               all Cayenne project XML files are in the location accessible to the ClassLoader 
               (e.g. /WEB-INF/classes").
               </p>
               
               <p>In addition Cayenne provides an ability to store and locate XML files 
               in "/WEB-INF/" directory. This is done via <a href=
               "../../api/cayenne/org/objectstyle/cayenne/conf/BasicServletConfiguration.html"
               >BasicServletConfiguration</a> subclass of Configuration. It does <code>cayenne.xml</code>
               and datamap files lookup relative to the WEB-INF directory of a deployed application.
               Since WEB-INF is a standard place to put configuration files, this approach makes
               configuration cleaner and more maintainable. 
               </p>
               
               <p>
               To get access to the resources under WEB-INF directory, Cayenne configuration object
               must get a hold of javax.servlet.ServletContext instance of the current application.
               There are a few different ways to achieve that:
               </p>
               
               <subsection name="13.2.1 Initialization Servlet"> 
               <p>This is the most common approach
               - use <code>init</code> method of the very first servlet loaded
               in the application. Sometimes a special initialization servlet is created
               solely for the purpose of application initialization. 
               Here is the steps to setup Cayenne.</p>

<p>Startup servlet initialization code:</p>
<source>
package com.somepackage;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import org.objectstyle.cayenne.conf.BasicServletConfiguration;

public class MyServlet extends HttpServlet {
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
  
        BasicServletConfiguration.initializeConfiguration(config.getServletContext());
        
        // perfom any other application initialization...
    }
...
</source>
            
<p>Configuring startup servlet in <code>web.xml</code>: </p>      
<source>...

&amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;myservl&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;com.somepackage.MyServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;load-on-startup&amp;gt;0&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt; 

...
</source>
			</subsection>
			<subsection name="13.2.2 Using Context and Session Listeners">   
               <p>Servlet Specification 2.3
               introduces a set of container events that can be sent to the interested
               listeners. Cayenne implements such listener that would automatically configure 
               BasicServletConfiguration: 
               <a href=
               "../../api/cayenne/org/objectstyle/cayenne/conf/WebApplicationListener.html"
               >WebApplicationListener</a> that implements container listener interfaces
               and can be registered as a listener to initialize Cayenne on context 
               startup and to assign a new DataContext object to every new session
               created.</p>
               
               <panel name="Note:">
               Check if your container supports Servlet Specification 2.3. For instance Tomcat >= 4.0
               does, while Tomcat 3.3 only supports 2.2
               </panel> 

<p>Registering listener in <code>web.xml</code>: </p>      
<source>...

&amp;lt;listener&amp;gt;
   &amp;lt;listener-class&amp;gt;org.objectstyle.cayenne.conf.WebApplicationListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt; 

...
</source>
		</subsection>
		
		<subsection name="13.2.3 Obtaining Session DataContext">      
        <p>Recommended way to use Cayenne in web applications is to have
        one DataContext per HttpSession. 
        No matter how the web application was configured (using default configuration
        and CLASSPATH, initialization servlet, or WebApplicationListener), DataContext
        can be obtained from the session in a consistent way by calling BasicServletConfiguration 
        static method:        
        </p> 
<source>
import org.objectstyle.cayenne.conf.BasicServletConfiguration;
import javax.servlet.http.HttpServletRequest;
...

// assume this exists
HttpServletRequest r;

// get session DataContext to perform database queries
DataContext ctxt = BasicServletConfiguration.getDefaultContext(r.getSession());
</source>
	</subsection>
</subsection>    
    </section>
</body>
</document>
