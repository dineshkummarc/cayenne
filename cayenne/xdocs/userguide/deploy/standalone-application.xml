<document>
<title>User Guide - Deployment</title>
<toc name="toc-user-guide" chapter="12. Deployment"/>
<body>
     <section name="12. Deployment">        
           <subsection name="12.1 Standalone Applications">
				<subsection name="12.1.1 Shared Configuration Singleton">
               <p>In a standalone Java application, <a href=
               "../../api/cayenne/org/objectstyle/cayenne/conf/DefaultConfiguration.html">DefaultConfiguration</a>
                is used to locate and load configuration files. This approach does not require any additional setup. 
				Shared configuration instance can simply be obtained by calling <code>getSharedConfiguration()</code>:</p>
                
<source>import org.objectstyle.cayenne.conf.Configuration;
...           
Configuration conf = Configuration.getSharedConfiguration();
</source>
<p>DefaultConfiguration will expect <code>cayenne.xml</code> file to be located 
              in the CLASSPATH. The same is true for DataMaps referenced in <code>cayenne.xml</code>.
              Their location is resolved relative to CLASSPATH as well. To make these files available to
              Cayenne, you can simply include them in the root of your application jar file (read 
				<a href="custom.html">Chapter 12.3.2</a> on how to change that). 
              </p>
              
              <p>The location of the data source files referenced in <code>cayenne.xml</code>
              is interpreted by the factory that was assigned to each datasource in <code>cayenne.xml</code>.
              Default factory is <a href=
               "../../api/cayenne/org/objectstyle/cayenne/conf/DriverDataSourceFactory.html"
               >DriverDataSourceFactory</a>. It will rely on its parent configuration to 
		       find the data source file (i.e. locating data source files will be no different from the DataMap files). 
				Depending on the application needs, programmers may implement custom factories that collect database 
			   information interactively by showing a login dialog, etc. 
               </p>
				</subsection>

				<p> </p>

				<subsection name="12.1.2 Shared Configuration and DataContext">
				<p>In a setup that relies on shared Configuration a DataContext can be created by calling 
				DataContext.createDataContext() static method that internally uses shared configuration:
				</p>
<source>
import org.objectstyle.cayenne.access.DataContext;
...
DataContext context = DataContext.createDataContext();</source>

				<p>Later a DataContext can be passed around in the code explicitly, or it can be bound to an 
				execution thread, making it accessible to all code being run within this thread (e.g. this can be a 
				Swing event thread):
				</p>
<source>
import org.objectstyle.cayenne.access.DataContext;
...
DataContext context = DataContext.createDataContext();
DataContext.bindThreadDataContext(context);</source>
				</subsection>

              
           </subsection>
    </section>
</body>
</document>
