<document>
<title>User Guide - Writing Cayenne Applications</title>

    <properties>
        <author>Andrei Adamchik</author>
    </properties>
<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/deploy/web-application.html</prev>
	<next>/userguide/deploy/jndi.html</next>
</navigator>    
<body>
     <section name="13. Deployment">
			<subsection name="13.3 Customizing Configuration" anchor="custom">
				<p>A user can create her own subclass of Configuration and use it instead. 
				Custom subclasses are usually created to load configuration files from 
				non-standard locations, to automatically configure Cayenne during 
				certain events that happen in deployment containers, etc. Cayenne framework
				provides a few implementations of Configuration discussed later in this chapter.
				</p>

				<p>To ensure that Cayenne uses configuration object of the right class, 
				Configuration singleton must be initialized properly before any calls 
				to Configuration are made: 
            	</p>

<source>import org.objectstyle.cayenne.conf.Configuration
...
String myConfigSubclass = "my.package.ConfigSubclass";
Configuration.setSharedConfiguration(myConfigSubclass);
</source>

            	<p>After this code is executed any subsequent calls to "Configuration.getSharedConfig" 
            	will return an instance of the custom class instead of DefaultConfiguration.
            	</p>
			</subsection>
    </section>
</body>
</document>
