<document>
<title>User Guide - Installation</title>

<navigator>
	<up>/userguide/index.html</up>
	<prev>/userguide/install/install.html</prev>
	<next>/userguide/install/compile.html</next>
</navigator>

<body>
    <section name="2. Installation">       
    	<subsection name="2.3 Understanding Cayenne JAR Files" anchor="jar">
            <p>There are two JAR files in <code>[cayenne_install_dir]/lib</code>
            directory: <ul>
            	<li><strong><code>cayenne.jar</code></strong></li>
				<li><strong><code>cayenne-nodeps.jar</code></strong></li>
			</ul>
			
            Either one or another should be used (<strong>but not both of them</strong>
            at the same time).
            In most cases <code>cayenne.jar</code> is the best choice. It has 
            Cayenne classes as well as all the needed dependencies. 
            Dependencies are bundled for easier installation and configuration of Cayenne.
            They include:
            
            <ul>
            	<li><a href="http://jakarta.apache.org/velocity/">Jakarta Velocity Template 
            	Engine</a>, version 1.3</li>
				<li><a href="http://jakarta.apache.org/oro/">Jakarta ORO Regular Expressions 
				package</a> <i>(also bundled with Velocity)</i></li>
				<li><a href="http://jakarta.apache.org/oro/">Jakarta Log4J 
				package</a>, version 1.2.6</li>
			</ul>
            
            If a leaner <code>cayenne-nodeps.jar</code> file is used, all the dependencies
            must be installed by the user manually.
            </p>
            
            <p>Make sure that <code>[cayenne_install_dir]/lib/cayenne.jar</code> is accessible by 
			the applications that use Cayenne. There are a few "standard" ways of doing it in Java,
			like setting CLASSPATH variable, etc.</p>
            
            <panel name="Warning:">It is NOT recommended to put Cayenne JAR files under 
            JRE extensions directory ($JRE_HOME/lib/ext or $JAVA_HOME/jre/lib/ext),
            though it will probably work for most cases.</panel>
            
            <p>The reason for the warning above is that classes loaded from extensions 
            directory have their own ClassLoader and can't directly 
            access resources associated with other ClassLoaders. Cayenne allows to "bootstrap"
            other ClassLoaders for the purpose of resource lookup, but this requires extra code
            and doesn't solve all problems.</p>
            
        </subsection>
    </section>
</body>
</document>
