<document>
<title>User Guide - Using SelectQueries</title>
<toc name="toc-user-guide" chapter="7. Using Queries"/> 
<body>
 	 <section name="7.8 Queries Stored in DataMap">
		<p>Parameterized queries are true prototype objects. They do not contain
		any contextual state information. Therefore they are suitable for the application-wide
		reuse. To simplify lookup of specific queries, Cayenne provides API to create 
		named queries associated with Entities in the DataMap. Queries can be 
		easily organized, and later located by the code that uses them. An example of 
		creating a named query is shown below. Such code is normally executed on application
		startup, before any DataContexts are created.		
		</p>
<source>
// this is a parameterized query initialized 
// similar to the previous examples
SelectQuery query; 

...

DataDomain domain = Configuration.getSharedConfig().getDomain();
ObjEntity ent = domain.getEntityResolver().lookupObjEntity(query);
ent.addQuery("MyQuery", query);
</source>

<p>Later, to find this query, called "MyQuery", the following code may be used 
(assuming that the query fetches Artists):
</p>
<source>
// assume this exists
DataContext context; 

...

SelectQuery queryProto = 
      context.getEntityResolver().lookupQuery(Artist.class, "MyQuery");
</source>  

    </section>
</body>
</document>