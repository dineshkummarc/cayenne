<document>
<title>Frequently Asked Questions: Develop with Cayenne</title>

<body>
    <section name="FAQ 3: Develop with Cayenne">
    	<subsection name="Q 3.1 What databases are currently supported?" 
		anchor="db">
    	
    	<p>Almost any database that has a JDBC driver will work with Cayenne. But there are
    	certain database specific issues that arise mostly when doing schema operations. This is 
    	discussed in detail <a href="../userguide/design/crossdb.html">here</a>. Having said that, 
    	Cayenne is tested and proven to be 100% compatible with 
    	the following engines:
    	<ul> 
    		<li><a href="http://oracle.com/">Oracle</a> (8, 8i, 9i)</li>
    		<li><a href="http://www.sybase.com/">Sybase (11.9)</a></li>
    		<li><a href="http://www.mysql.com/">MySQL</a></li>
    		<li><a href="http://www.postgresql.org/">PostgreSQL</a> (7.3 and newer)</li>
    		<li><a href="http://hsqldb.sourceforge.net/">HSQLDB</a></li> 
    	</ul>
    	
    	Adapters for other engines are constantly added. Users can create their own adapters as well.
    	</p>
    	
    	<p><i>Note on MS SQLServer adapter:</i> SybaseAdapter is best fitted to be used with SQLServer. We may
    	create a separate adapter for it in the future.
    	</p>
    	</subsection>
    	
        <subsection name="Q 3.2 I am getting exceptions like 'Error generating PK' or 'No suitable DataNode to handle entity 'XYZ'." 
		anchor="linking">
		
		<panel name="Note:">
		This advise applies to CayenneModeler prior to 1.0b4 release. In Modeler 1.0b4 and newer, linking 
		DataMaps to DataNodes is no longer burried deep in the menus, and is performed on the 
		DataMap edit screen.
		</panel>
    	
    	<p>Likely cause of these errors is that one of your Cayenne DataMaps is not 
    	linked to any DataNodes. This is pending a better, more intuitive GUI. 
    	For now you should do the following:
    	<ul>
    		<li>Open project in the CayenneModeler</li>
   			<li>Select data node in the bottom of the project tree on the left.</li>
			<li>Go to menu "Project" -> "Link DataMap to Node"<br/><br/>
				<img src="../images/link-node.gif" width="553" height="466" border="0" align="middle"
				alt="Link DataMap"/><br/><br/>
			</li>
			<li>Select appropriate DataMap</li>
   			<li>Save the project.</li>
    	</ul>
    	</p>
    	</subsection>
    	
    	<subsection name="Q 3.3 How do I log an output of a single query?" 
		anchor="log_query">
    	
    	<p>Cayenne logging system is based on Jakarta 
    	<a href="http://jakarta.apache.org/log4j/">Log4J</a> package.
    	To increase logging level of the execution of a 
    	single select query do something like this:</p>
    	
<source>
  SelectQuery selectQuery = ...;
  selectQuery.setLoggingLevel(org.apache.log4j.Level.WARN);
  List objects = dataContext.performQuery(selectQuery);
</source>
		<p>To increase logging level of a commit execution do this:</p>
<source>
  dataContext.commitChanges(org.apache.log4j.Level.WARN);
</source>
    	</subsection>
    	
    	<subsection name="Q 3.4 I am on MySQL and I keep getting 'Can't disable AUTO_COMMIT' error. How do I fix it?" 
		anchor="auto_commit">
    	
    	<p>Errors like the one below may happen when using an outdated MySQL JDBC driver:</p>
    	<pre>java.sql.SQLException: Cannot disable AUTO_COMMIT
	at org.gjt.mm.mysql.Connection.setAutoCommit(Connection.java:396)
	at org.objectstyle.cayenne.conn.ConnectionWrapper.setAutoCommit(ConnectionWrapper.java:343)
	at org.objectstyle.cayenne.access.DataNode.performQueries(DataNode.java:245)
    	</pre>
    	
    	<p>Though MySQL technically does not support transactions (stable release
    	as of this writing), call to "setAutoCommit" is completely legitimate and shouldn't fail.
    	Downloading the latest stable driver from <a href="http://www.mysql.com/products/connector-j/index.html">MySQL 
    	website</a> should fix this problem.</p>
    	</subsection>
    	
        <subsection name="Q 3.5 How do I select objects that do not have a certain other object in its to-many relationship?" 
		anchor="not-query">
    	
    	<p>Sometimes there is a need to find all objects that DO NOT have a certain object (or objects) 
    	on the other side of their to-many relationship. From the SQL standpoint, an inner join will not 
    	produce the right results. Rather a subquery is normally used. In Cayenne you can do this in a 
    	simple two step process. Lets take the following example. There is a Project class and a Task class.
    	Project has many tasks. We need to fetch all projects that do not contain a task with type "Database".</p>
    	
		<p>The most obvious, but incorrect solution:</p>    	
<source>
DataContext ctxt;
...
Expression qualifier = ExpressionFactory.noMatchExp("taskArray.type", "Database");
List projects = ctxt.performQuery(new SelectQuery(Project.class, qualifier));
</source>

		<p>Correct solution:</p>    	
<source>
DataContext ctxt;
...
Expression qualifier = ExpressionFactory.matchExp("taskArray.type", "Database");
List excludeProjects = ctxt.performQuery(new SelectQuery(Project.class, qualifier));
List projects = ctxt.performQuery(new SelectQuery(Project.class));

// filter out projects that do not satisfy criteria
projects.removeAll(excludeProjects);
</source>
    	</subsection>
    </section>
</body>
</document>
