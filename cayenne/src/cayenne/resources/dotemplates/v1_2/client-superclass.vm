#if( ${classGen.isUsingPackage()} )
package ${classGen.packageName};

#end
#if( ${classGen.isContainingListProperties()} )
import java.util.List;

#end
/** Class ${classGen.superPrefix}${classGen.className} was generated by Cayenne.
  *  It is probably a good idea to avoid changing this class manually, 
  *  as it may be overwritten next time code is regenerated. 
  *  If you need to make any customizations, place them in 
  *  subclass. 
  */
public class ${classGen.superPrefix}${classGen.className} extends $classGen.superClassName {

## Create property symbolic names
#foreach( $attr in ${classGen.Entity.DeclaredAttributes} )
#set( $classGen.prop = $attr.name )## let controller know about current property
    public static final String ${classGen.propAsConstantName}_PROPERTY = "${attr.name}";
#end
#foreach( $rel in ${classGen.Entity.DeclaredRelationships} )
#set( $classGen.prop = $rel.name )## let controller know about current property
    public static final String ${classGen.propAsConstantName}_PROPERTY = "${rel.name}";
#end

##Declare property instance variables
#foreach( $attr in ${classGen.Entity.DeclaredAttributes} )
#set( $classGen.Prop = $attr.Name )## let controller know about current property
    protected $classGen.formatJavaType(${attr.type}) ${attr.name};
#end
#foreach( $rel in ${classGen.Entity.DeclaredRelationships} )
#set( $classGen.Prop = $rel.Name )## let controller know about current property
#if( $rel.ToMany )
    protected List ${rel.Name};
#else
	protected $classGen.formatJavaType(${rel.targetEntity.ClientClassName}) ${rel.name};
#end
#end

## Create attribute set/get methods
#foreach( $attr in ${classGen.Entity.DeclaredAttributes} )
#set( $classGen.Prop = $attr.Name )## let controller know about current property
#if ("true" != "${classGen.getEntity().isReadOnly()}")
    public void set${classGen.cappedProp}($classGen.formatJavaType(${attr.type}) object) {
        willWrite("${attr.name}", this.${attr.name}, object);
        this.${attr.name} = object;
    }
#end
    public $classGen.formatJavaType(${attr.type}) get${classGen.cappedProp}() {
        willRead("${attr.name}");
        return this.${attr.name};
    }
    
#end
##
## Create list add/remove/get methods
#foreach( $rel in ${classGen.Entity.DeclaredRelationships} )
#set( $classGen.Prop = $rel.name )## let controller know about current property
#if( $rel.ToMany )
#if ( ! $rel.readOnly )
    public void addTo${classGen.cappedProp}($classGen.formatJavaType(${rel.targetEntity.clientClassName}) object) {
        get${classGen.cappedProp}().add(object);
    }
    public void removeFrom${classGen.cappedProp}($classGen.formatJavaType(${rel.targetEntity.clientClassName}) object) {
        get${classGen.cappedProp}().remove(object);
    }
#end
    public List get${classGen.cappedProp}() {
        willRead("${rel.name}");
        return ${rel.name};
    }
#else
#if ( !${classGen.getEntity().isReadOnly()} && !$rel.readOnly )
    public void set${classGen.cappedProp}($classGen.formatJavaType(${rel.targetEntity.clientClassName}) object) {
        willWrite("${rel.name}", this.${rel.name}, object);
        this.${rel.name} = object;
    }
#end

    public $classGen.formatJavaType(${rel.targetEntity.clientClassName}) get${classGen.cappedProp}() {
        willRead("${rel.name}");
        return ${rel.name};
    } 
#end

#end
}
