/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParser.java */
/* ====================================================================
 * 
 * The ObjectStyle Group Software License, version 1.1
 * ObjectStyle Group - http://objectstyle.org/
 * 
 * Copyright (c) 2002-2004, Andrei (Andrus) Adamchik and individual authors
 * of the software. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 
 * 3. The end-user documentation included with the redistribution, if any,
 *    must include the following acknowlegement:
 *    "This product includes software developed by independent contributors
 *    and hosted on ObjectStyle Group web site (http://objectstyle.org/)."
 *    Alternately, this acknowlegement may appear in the software itself,
 *    if and wherever such third-party acknowlegements normally appear.
 * 
 * 4. The names "ObjectStyle Group" and "Cayenne" must not be used to endorse
 *    or promote products derived from this software without prior written
 *    permission. For written permission, email
 *    "andrus at objectstyle dot org".
 * 
 * 5. Products derived from this software may not be called "ObjectStyle"
 *    or "Cayenne", nor may "ObjectStyle" or "Cayenne" appear in their
 *    names without prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE OBJECTSTYLE GROUP OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 * 
 * This software consists of voluntary contributions made by many
 * individuals and hosted on ObjectStyle Group web site.  For more
 * information on the ObjectStyle Group, please see
 * <http://objectstyle.org/>.
 */
package org.objectstyle.cayenne.exp.parser;

import java.io.*;
import java.util.*;
import java.math.*;
import org.objectstyle.cayenne.exp.*;

/**
  * Parser of Cayenne Expressions. 
  *
  * @since 1.1
  */
public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants, ExpressionParserConstants {/*@bgen(jjtree)*/
  protected JJTExpressionParserState jjtree = new JJTExpressionParserState();public static void main(String[] arg) {
        // since Main is used for some basic speed measuring,
        // lets run it twice to "warm up" the parser
        ExpressionFactory.expressionFromString(arg[0]);

        long start = System.currentTimeMillis();
        Expression exp = ExpressionFactory.expressionFromString(arg[0]);
        long end = System.currentTimeMillis();

        System.out.println(exp);
        System.out.println("Parsed in " + (end - start) + " ms.");
    }

  final public Expression expression() throws ParseException {
    orExpression();
    jj_consume_token(0);
        {if (true) return (Expression) jjtree.rootNode();}
    throw new Error("Missing return statement in function");
  }

  final public void orExpression() throws ParseException {
    andExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(1);
                            ASTOr jjtn001 = new ASTOr(JJTOR);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
        andExpression();
      } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001,  2);
                            }
      }
    }
  }

  final public void andExpression() throws ParseException {
    notExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(2);
                                 ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
        notExpression();
      } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
      }
    }
  }

  final public void notExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
    case 4:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        jj_consume_token(3);
        break;
      case 4:
        jj_consume_token(4);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                             ASTNot jjtn001 = new ASTNot(JJTNOT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        condition();
      } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  1);
                             }
      }
      break;
    case 5:
    case 21:
    case 22:
    case PROPERTY_PATH:
      condition();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
    case 22:
    case PROPERTY_PATH:
      simpleCondition();
      break;
    case 5:
      jj_consume_token(5);
      orExpression();
      jj_consume_token(6);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simpleCondition() throws ParseException {
    pathExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
    case 8:
    case 9:
    case 10:
      equalityCondition();
      break;
    case 11:
    case 12:
    case 13:
    case 14:
      comparisonCondition();
      break;
    case 3:
    case 15:
    case 16:
    case 17:
    case 18:
      negatedCondition();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void equalityCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
    case 8:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        break;
      case 8:
        jj_consume_token(8);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        scalarExpression();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  2);
                          }
      }
      break;
    case 9:
    case 10:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        jj_consume_token(9);
        break;
      case 10:
        jj_consume_token(10);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      scalarExpression();
                                              ASTEqual jjtn002 = new ASTEqual(JJTEQUAL);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
      try {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                              jjtn002.setNegating(true);
      } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void comparisonCondition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
                 ASTLessOrEqual jjtn001 = new ASTLessOrEqual(JJTLESSOREQUAL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
      try {
        scalarExpression();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
      }
      break;
    case 12:
      jj_consume_token(12);
                ASTLess jjtn002 = new ASTLess(JJTLESS);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
        scalarExpression();
      } catch (Throwable jjte002) {
                if (jjtc002) {
                  jjtree.clearNodeScope(jjtn002);
                  jjtc002 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte002 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte002;}
                }
                if (jjte002 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte002;}
                }
                {if (true) throw (Error)jjte002;}
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002,  2);
                }
      }
      break;
    case 13:
      jj_consume_token(13);
                 ASTGreater jjtn003 = new ASTGreater(JJTGREATER);
                 boolean jjtc003 = true;
                 jjtree.openNodeScope(jjtn003);
      try {
        scalarExpression();
      } catch (Throwable jjte003) {
                 if (jjtc003) {
                   jjtree.clearNodeScope(jjtn003);
                   jjtc003 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte003 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte003;}
                 }
                 if (jjte003 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte003;}
                 }
                 {if (true) throw (Error)jjte003;}
      } finally {
                 if (jjtc003) {
                   jjtree.closeNodeScope(jjtn003,  2);
                 }
      }
      break;
    case 14:
      jj_consume_token(14);
                 ASTGreaterOrEqual jjtn004 = new ASTGreaterOrEqual(JJTGREATEROREQUAL);
                 boolean jjtc004 = true;
                 jjtree.openNodeScope(jjtn004);
      try {
        scalarExpression();
      } catch (Throwable jjte004) {
                 if (jjtc004) {
                   jjtree.clearNodeScope(jjtn004);
                   jjtc004 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte004 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte004;}
                 }
                 if (jjte004 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte004;}
                 }
                 {if (true) throw (Error)jjte004;}
      } finally {
                 if (jjtc004) {
                   jjtree.closeNodeScope(jjtn004,  2);
                 }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void negatedCondition() throws ParseException {
        boolean negating = false;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(3);
                   negating = true;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
    case 16:
      likeCondition(negating);
      break;
    case 17:
      inCondition(negating);
      break;
    case 18:
      betweenCondition(negating);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void likeCondition(boolean negating) throws ParseException {
   boolean ignoringCase = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      break;
    case 16:
      jj_consume_token(16);
                                ignoringCase = true;
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    scalarCharExpression();
          ASTLike jjtn001 = new ASTLike(JJTLIKE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
            jjtn001.setNegating(negating);
            jjtn001.setIgnoringCase(ignoringCase);
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
    }
  }

  final public void inCondition(boolean negating) throws ParseException {
    jj_consume_token(17);
    jj_consume_token(5);
    scalarCommaList();
    jj_consume_token(6);
          ASTIn jjtn001 = new ASTIn(JJTIN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
          jjtree.closeNodeScope(jjtn001,  2);
          jjtc001 = false;
          jjtn001.setNegating(negating);
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
          }
    }
  }

  final public void betweenCondition(boolean negating) throws ParseException {
    jj_consume_token(18);
    scalarExpression();
    jj_consume_token(2);
    scalarExpression();
           ASTBetween jjtn001 = new ASTBetween(JJTBETWEEN);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
    try {
           jjtree.closeNodeScope(jjtn001,  3);
           jjtc001 = false;
           jjtn001.setNegating(negating);
    } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  3);
           }
    }
  }

  final public void scalarCommaList() throws ParseException {
          ASTList jjtn001 = new ASTList(JJTLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      scalarExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(19);
        scalarExpression();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
    }
  }

  final public void scalarExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      jj_consume_token(INT_LITERAL);
                     ASTScalar jjtn001 = new ASTScalar(JJTSCALAR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
                     jjtree.closeNodeScope(jjtn001,  0);
                     jjtc001 = false;
                     jjtn001.setValue(token_source.literalValue);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  0);
                     }
      }
      break;
    case FLOAT_LITERAL:
      jj_consume_token(FLOAT_LITERAL);
                         ASTScalar jjtn002 = new ASTScalar(JJTSCALAR);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
                         jjtree.closeNodeScope(jjtn002,  0);
                         jjtc002 = false;
                         jjtn002.setValue(token_source.literalValue);
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002,  0);
                         }
      }
      break;
    case SINGLE_QUOTED_STRING:
      jj_consume_token(SINGLE_QUOTED_STRING);
                                 ASTScalar jjtn003 = new ASTScalar(JJTSCALAR);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
      try {
                                 jjtree.closeNodeScope(jjtn003,  0);
                                 jjtc003 = false;
                                 jjtn003.setValue(token_source.literalValue);
      } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003,  0);
                                 }
      }
      break;
    case DOUBLE_QUOTED_STRING:
      jj_consume_token(DOUBLE_QUOTED_STRING);
                                  ASTScalar jjtn004 = new ASTScalar(JJTSCALAR);
                                  boolean jjtc004 = true;
                                  jjtree.openNodeScope(jjtn004);
      try {
                                  jjtree.closeNodeScope(jjtn004,  0);
                                  jjtc004 = false;
                                  jjtn004.setValue(token_source.literalValue);
      } finally {
                                  if (jjtc004) {
                                    jjtree.closeNodeScope(jjtn004,  0);
                                  }
      }
      break;
    case 20:
      namedParameter();
      break;
    case NULL:
          ASTScalar jjtn005 = new ASTScalar(JJTSCALAR);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(NULL);
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005,  0);
          }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void scalarCharExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SINGLE_QUOTED_STRING:
      jj_consume_token(SINGLE_QUOTED_STRING);
                                   ASTScalar jjtn001 = new ASTScalar(JJTSCALAR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
      try {
                                   jjtree.closeNodeScope(jjtn001,  0);
                                   jjtc001 = false;
                                   jjtn001.setValue(token_source.literalValue);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  0);
                                   }
      }
      break;
    case DOUBLE_QUOTED_STRING:
      jj_consume_token(DOUBLE_QUOTED_STRING);
                                   ASTScalar jjtn002 = new ASTScalar(JJTSCALAR);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
      try {
                                   jjtree.closeNodeScope(jjtn002,  0);
                                   jjtc002 = false;
                                   jjtn002.setValue(token_source.literalValue);
      } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002,  0);
                                   }
      }
      break;
    case 20:
      namedParameter();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void namedParameter() throws ParseException {
        Token t;
    jj_consume_token(20);
    t = jj_consume_token(PROPERTY_PATH);
                                  ASTNamedParameter jjtn001 = new ASTNamedParameter(JJTNAMEDPARAMETER);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
    try {
                                  jjtree.closeNodeScope(jjtn001,  0);
                                  jjtc001 = false;
                                  jjtn001.setValue(t.image);
    } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  0);
                                  }
    }
  }

  final public void pathExpression() throws ParseException {
   Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROPERTY_PATH:
      t = jj_consume_token(PROPERTY_PATH);
                           ASTObjPath jjtn001 = new ASTObjPath(JJTOBJPATH);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
                           jjtree.closeNodeScope(jjtn001,  0);
                           jjtc001 = false;
                           jjtn001.setValue(t.image);
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  0);
                           }
      }
      break;
    case 21:
      jj_consume_token(21);
      t = jj_consume_token(PROPERTY_PATH);
                           ASTObjPath jjtn002 = new ASTObjPath(JJTOBJPATH);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
      try {
                           jjtree.closeNodeScope(jjtn002,  0);
                           jjtc002 = false;
                           jjtn002.setValue(t.image);
      } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  0);
                           }
      }
      break;
    case 22:
      jj_consume_token(22);
      t = jj_consume_token(PROPERTY_PATH);
                           ASTDbPath jjtn003 = new ASTDbPath(JJTDBPATH);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
      try {
                           jjtree.closeNodeScope(jjtn003,  0);
                           jjtc003 = false;
                           jjtn003.setValue(t.image);
      } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003,  0);
                           }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public ExpressionParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2,0x4,0x18,0x10600038,0x10600020,0x7ff88,0x180,0x600,0x780,0x7800,0x8,0x78000,0x18000,0x80000,0x8100000,0x100000,0x10600000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x390,0x90,0x0,};
   }

  public ExpressionParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public ExpressionParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public ExpressionParser(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  public void ReInit(ExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[46];
    for (int i = 0; i < 46; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 17; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
