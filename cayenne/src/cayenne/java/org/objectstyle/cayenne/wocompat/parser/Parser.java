/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.objectstyle.cayenne.wocompat.parser;
import java.io.*;
import java.util.*;


public class Parser implements ParserConstants {
   public Hashtable parseStrings;

public Parser() {
    this(System.in);
    }

public Parser(String filename) throws FileNotFoundException {
    this(new FileInputStream(filename));
    }

public Parser(File f) throws FileNotFoundException {
    this(new FileInputStream(f));
    }

public Object propertyList() {
  try {
    return object();
    }
  catch (ParseException pe) {
    System.err.println("Error parsing property list file: "+pe);
    return null;
    }
  }

public static void main(String args[]) {
  Parser r = new Parser();
  Object o = r.propertyList();
  System.out.println(o);
  }

  final public Object object() throws ParseException {
 Object node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      node = array();
          {if (true) return node;}
      break;
    case 10:
      node = dictionary();
          {if (true) return node;}
      break;
    case INT:
    case FLOAT:
    case STRING:
    case QUOTED_STRING:
      node = leaf();
          {if (true) return node;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object leaf() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
          {if (true) return Integer.valueOf(token.image);}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
            {if (true) return Double.valueOf(token.image);}
      break;
    case QUOTED_STRING:
      jj_consume_token(QUOTED_STRING);
                    {if (true) return token.image;}
      break;
    case STRING:
      jj_consume_token(STRING);
             {if (true) return token.image;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public HashMap dictionary() throws ParseException {
  HashMap h;
  Object key, val;
    jj_consume_token(10);
       h = new HashMap();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case 8:
      case 10:
      case STRING:
      case QUOTED_STRING:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      key = object();
      jj_consume_token(7);
      val = object();
      jj_consume_token(13);
                                        h.put(key,val);
    }
    jj_consume_token(11);
        {if (true) return h;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList array() throws ParseException {
  ArrayList v;
  Object o;
    jj_consume_token(8);
         v = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case 8:
    case 10:
    case STRING:
    case QUOTED_STRING:
      o = object();
                   v.add(o);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 12:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(12);
        o = object();
                        v.add(o);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(9);
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  public ParserTokenManager token_source;
  ASCII_CharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  final private int[] jj_la1_0 = {0x8004560,0x8004060,0x8004560,0x1000,0x8004560,};

  public Parser(java.io.InputStream stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[28];
    for (int i = 0; i < 28; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
