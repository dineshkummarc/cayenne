<?xml version="1.0"?>


<project name="cayenne" default="dist" basedir=".">   
    <!-- ============================================= -->
    <!-- Loads properties from default locations.      -->
    <!-- ============================================= -->
    <property file="${user.home}/build.properties" />
    <property file="build.properties" />
    <property file="default.properties" />
    
    
    <!-- ============================================= -->
    <!-- Derived Properties. These properties are      -->
    <!-- derived from other properties. You probably   -->
    <!-- don't want to redefine them.                  -->
    <!-- ============================================= -->
    <property name="dist" value="${dist.base}/${project.name}-${project.version}"/>


    <path id="classpath">
    	<pathelement path="${ant.home}/lib/ant.jar"/>
        <fileset dir="otherlib">
            <include name="**.jar"/>
        </fileset>
    </path>


    <!-- ============================================= -->
    <!-- Prints help message describing build.xml use. -->
    <!-- ============================================= -->
    <target name="help"
        description="Prints help message.">
        <echo>
     ******************************************************
     * TARGETS (also you can use "-projecthelp" ant flag 
     * to see targets):
     *  1. dist       - (default target) creates Cayenne development, 
     *                  distribution including all code dependencies.
     *  2. dist-bin   - creates Cayenne binary distribution.
     *  3. dist-src   - creates Cayenne source distribution.
     *  4. jar-nodep  - creates "lean" Cayenne JAR file, 
     *  5. jar        - creates full Cayenne JAR file, 
     *                  including all dependencies.
     *  6. jar-other  - creates optional Cayenne subproject jars. 
     *  7. clean      - cleans temporary build and distribution 
     *                  directories
     *  8. doc        - builds Cayenne documentation including Javadocs.
     *  9. api        - builds Javdoc API documentation.
     *  10. compile_subprojects 
     *                - builds subprojects
     *  11. prepare   - creates directories needed for compilation and 
     *                  distribution
     *  12. help      - prints this message
     *
     *
     * ENVIRONMENT:
     *  java.home = ${java.home}
     *  user.home = ${user.home}
     *  ant.home = ${ant.home}
     *  build.compiler = ${build.compiler}
     *  java.class.path = ${java.class.path}
     ******************************************************
         </echo>
    </target>


    <!-- ============================================= -->
    <!-- Deploys Cayenne web site in a local           -->
    <!-- directory.                                    -->
    <!-- ============================================= -->
    <target name="deploy-web" depends="prepare,doc,api" if="deploy.web">
    	 <delete dir="${deploy.web}/cayenne"/>
         <mkdir dir="${deploy.web}/cayenne"/>
             
         <!-- copy all but HTML -->
         <copy todir="${deploy.web}/cayenne">
             <fileset dir="${dist}/doc"> 
             	<exclude name="**/*.html"/>
             </fileset>
         </copy>
         
         <!-- do replacement in HTML files -->
         <copy todir="${deploy.web}/cayenne">
             <fileset dir="${dist}/doc"> 
             	<include name="**/*.html"/>
             </fileset>
             
             <filterset begintoken="!--" endtoken="--">
				<filter token="SFLOGO" value="${sf.logo}"/>
			 </filterset>
         </copy>
    </target>
    
    
    <!-- ========================================== -->
    <!-- Creates Cayenne distribution and build     -->
    <!-- directories.                               -->
    <!-- ========================================== -->
    <target name="prepare">
        <mkdir dir="${dist.base}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/lib"/>
        <mkdir dir="${dist}/doc"/>
        <mkdir dir="${dist}/doc/api"/>
        <mkdir dir="${dist}/doc/dtd"/>
        <mkdir dir="${dist}/bin"/>
    </target>


    <!-- ========================================== -->
    <!-- Creates full Cayenne distribution          -->
    <!-- including source code.                     -->
    <!-- ========================================== -->
    <target name="dist-src" depends="dist,doc,api"
        description="Creates Cayenne source distribution.">
        <mkdir dir="${dist}/src"/>
        
        <mkdir dir="${dist}/src/cayenne"/>
        <copy todir="${dist}/src/cayenne">
            <fileset dir="src" includes="org/**"/>
        </copy>
        
        <mkdir dir="${dist}/src/tests"/>
        <copy todir="${dist}/src/tests">
            <fileset dir="tests" includes="org/**"/>
        </copy>
        
        <tar tarfile="${dist.base}/${project.name}-src-${project.version}.tar">
            <tarfileset dir="${dist.base}">
                <include name="${project.name}-${project.version}/**"/>
            </tarfileset>
        </tar>
        <gzip src="${dist.base}/${project.name}-src-${project.version}.tar" 
              zipfile="${dist.base}/${project.name}-src-${project.version}.tar.gz"/>  
        <delete file="${dist.base}/${project.name}-src-${project.version}.tar"/>
    </target>


    <!-- ========================================== -->
    <!-- Creates Cayenne binary distribution.       -->
    <!-- ========================================== -->
    <target name="dist-bin" depends="dist,doc,api"
        description="Creates Cayenne binary distribution.">
        <tar tarfile="${dist.base}/${project.name}-${project.version}.tar">
            <tarfileset dir="${dist.base}">
                <include name="${project.name}-${project.version}/**"/>
            </tarfileset>
        </tar>
        <gzip src="${dist.base}/${project.name}-${project.version}.tar" 
              zipfile="${dist.base}/${project.name}-${project.version}.tar.gz"/>  
        <delete file="${dist.base}/${project.name}-${project.version}.tar"/>
    </target>


    <!-- ========================================== -->
    <!-- Creates Cayenne development distribution.  -->
    <!-- It does not include source  code or        -->
    <!-- documentation.                             -->
    <!-- ========================================== -->
    <target name="dist" depends="prepare,compile_subprojects,jar,jar-other,jar-nodeps"
        description="Creates Cayenne development, distribution including all code dependencies.">
        <copy file="doc/LICENSE" todir="${dist}"/>

        <copy todir="${dist}/bin" overwrite="true">
            <fileset dir="src/bin" includes="*.bat,*.sh"/>
            <fileset dir="tests" includes="*.bat,*.sh"/>
        </copy>

        <chmod perm="gu+x">
            <fileset dir="${dist}/bin">
                <include name="**/*.sh"/>
            </fileset>
        </chmod>
    </target>


    <!-- ========================================== -->
    <!-- Build "lean" JAR file without dependencies.-->
    <!-- ========================================== -->
    <target name="jar-nodeps" depends="prepare,compile_subprojects">
        <jar jarfile="${dist}/lib/cayenne-nodeps.jar">
            <fileset dir="src/${build}/classes"/>
            <fileset dir="src/${build}/templates"/>
            <metainf dir="doc" includes="LICENSE"/>
            <manifest>
               <attribute name="Built-By" value="${user.name}"/>
               <attribute name="Extension-Name" value="org.objectstyle.cayenne"/>
               <attribute name="Specification-Version" value="${project.name}"/>
               <attribute name="Specification-Vendor" value="ObjectStyle.org"/>
               <attribute name="Implementation-Vendor-Id" value="org.objectstyle"/>
               <attribute name="Implementation-Version" value="${project.version}"/>
               <attribute name="Implementation-Vendor" value="ObjectStyle.org"/>
            </manifest>
        </jar>
    </target>
  
  
    <!-- ========================================== -->
    <!-- Build "fat" JAR file with dependencies.    -->
    <!-- ========================================== -->
    <target name="jar" depends="prepare,compile_subprojects">
        <mkdir dir="src/${build}/unjar"/>
        <unjar src="${velocity.jar}" dest="src/${build}/unjar"/>
        <delete dir="src/${build}/unjar/META-INF"/>

        <jar jarfile="${dist}/lib/cayenne.jar">
            <fileset dir="src/${build}/classes"/>
            <fileset dir="src/${build}/templates"/>
            <fileset dir="src/${build}/unjar"/>
            <metainf dir="doc">
                <include name="LICENSE*"/>
            </metainf>
            
            <manifest>
               <attribute name="Built-By" value="${user.name}"/>
               <attribute name="Extension-Name" value="org.objectstyle.cayenne"/>
               <attribute name="Specification-Version" value="${project.name}"/>
               <attribute name="Specification-Vendor" value="ObjectStyle.org"/>
               <attribute name="Implementation-Vendor-Id" value="org.objectstyle"/>
               <attribute name="Implementation-Version" value="${project.version}-dep"/>
               <attribute name="Implementation-Vendor" value="ObjectStyle.org"/>
            </manifest>
        </jar>
    </target>


    <!-- ========================================== -->
    <!-- Build optional JAR files.                  -->
    <!-- ========================================== -->
    <target name="jar-other" depends="prepare,compile_subprojects">
        <jar jarfile="${dist}/lib/cayenne-tests.jar" manifest="tests/MANIFEST.MF">
            <fileset dir="tests/${build}/classes"/>
            <metainf dir="doc" includes="LICENSE"/>
        </jar>
        
        <!-- JUnit JAR is required for the tests to run. -->
        <copy file="otherlib/junit.jar" todir="${dist}/lib"/>
        
        <!-- Ant JAR is required for the Ant-specific tests to run. -->
        <copy file="otherlib/ant.jar" todir="${dist}/lib"/>
    </target>
    
    
    <!-- ========================================== -->
    <!-- Creates performance testing JAR.           -->
    <!-- ========================================== -->
    <target name="build-perf" depends="prepare,jar,jar-other">
        <ant dir="performance" target="compile"/>
        
        <jar jarfile="${dist}/lib/cayenne_perf.jar" manifest="performance/MANIFEST.MF">
            <fileset dir="performance/${build}/classes"/>
            <metainf dir="doc" includes="LICENSE"/>
        </jar>
    </target>
    


    <!-- ========================================== -->
    <!-- Cleans distribution files and subprojects. -->
    <!-- ========================================== -->
    <target name="clean" depends="clean-java">
        <delete dir="${dist.base}"/>
    </target>
    
    
    <!-- ========================================== -->
    <!-- Cleans Java build directories.             -->
    <!-- ========================================== -->
    <target name="clean-java">
        <ant dir="src" target="clean"/>
        <ant dir="tests" target="clean"/>
        <ant dir="performance" target="clean"/>
    </target>



    <!-- ========================================== -->
    <!-- Builds Cayenne documenatation.             -->
    <!-- ========================================== -->
    <target name="doc" depends="prepare">
        <!-- copy all licenses including ours -->
        <copy todir="${dist}/doc">
            <fileset dir="doc">
               <include name="LICENSE*"/>
            </fileset>
        </copy>

        <taskdef name="anakia" classname="org.apache.velocity.anakia.AnakiaTask">
            <classpath refid="classpath"/>
        </taskdef>
        
        <!-- Build site -->
        <anakia basedir="xdocs" destdir="${dist}/doc"
             extension=".html" style="cayenne.vsl"
             projectFile="stylesheets/project.xml"
             excludes="**/stylesheets/**"
             includes="**/*.xml"
             lastModifiedCheck="true"
             templatePath="xdocs/stylesheets">
        </anakia>

        <!-- copy images -->
        <copy todir="${dist}/doc/images" filtering="no">
            <fileset dir="xdocs/images">
                <include name="**/*.gif"/>
                <include name="**/*.jpeg"/>
                <include name="**/*.jpg"/>
                <include name="**/*.css"/>
            </fileset>
        </copy>
        
        <!-- copy DTD's -->
        <copy todir="${dist}/doc/dtd">
            <fileset dir="src/dtd">
                <include name="**/*.dtd"/>
            </fileset>
        </copy>
        
        <!-- copy tutorial code -->
        <copy todir="${dist}/doc/tutorial" filtering="no">
            <fileset dir="doc/tutorial"/>
        </copy>
    </target>


    <!-- ========================================== -->
    <!-- Builds API documenatation.                 -->
    <!-- ========================================== -->
    <target name="api" depends="prepare,doc">
        <javadoc    packagenames="org.objectstyle.*"
                    sourcepath="src"
                    defaultexcludes="yes"
                    destdir="${dist}/doc/api"
                    author="true"
                    use="true"
                    windowtitle="Cayenne API">
            <group title="Core Packages" packages="org.objectstyle.*"/>
            <group title="WebObjects Compatibility Packages" packages="org.objectstyle.cayenne.wocompat*"/>
			<group title="GUI Packages" packages="org.objectstyle.cayenne.gui*"/>
            <doctitle><![CDATA[<h2><a href="http://objectstyle.org/cayenne/" target="top">
            		<img height="40" border="0" src="../images/cayenne_logo_small.gif"><a> 
            		Cayenne API Documentation (Version ${project.version})</h2>]]></doctitle>
            <bottom><![CDATA[<!--SFLOGO--> &nbsp; <i>Copyright &#169; 2001-2002 <a href=
            "http://objectstyle.org">ObjectStyle.org</a> All Rights Reserved.</i>]]>
            </bottom>
            <classpath refid="classpath"/>
        </javadoc>
    </target>


    <!-- ========================================== -->
    <!-- Compiles subprojects.                      -->
    <!-- ========================================== -->
    <target name="compile_subprojects">
        <ant dir="src" target="compile"/>
        <ant dir="tests" target="compile"/>
    </target>
</project>


