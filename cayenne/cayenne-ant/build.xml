<?xml version="1.0"?>
 
<!-- ================================================= -->
<!--            Cayenne master build file.             -->
<!-- Serves as a facade to a set of private buildfiles.-->
<!-- ================================================= -->
<project name="cayenne" default="jar">

    <!-- ============================================= -->
	<!-- Prepare the environment: load properties,     -->
	<!-- init imports, cretae derived properties.      -->
    <!-- ============================================= -->
    <property file="default.properties"/>
	<property name="dist" value="${dist.base}/${project.name}-${project.version}"/>
	<property name="license.dir" value="${cayenne.other}/licenses"/>
	<property name="notes.dir" value="${cayenne.other}/release-notes"/>
	
	<import file="import/ant-macros.xml"/>
	<import file="import/ant-paths.xml"/>
    
    <!-- ============================================= -->
    <!-- Prints help message describing build.xml use. -->
    <!-- ============================================= -->
    <target name="help">
        <echo>BUILD TARGETS:
==============     
     
       jar        - (DEFAULT) builds all subproject JAR files.
       release      - creates a full Cayenne distribution.
       compile      - compiles all subprojects source files.
       clean        - cleans temporary build and distribution directories
       clean-java   - cleans all build directories, preserving the docs and eclipse build
       doc          - builds Cayenne documentation, excluding Javadocs
       api          - builds Javdoc API documentation.
       javacc       - updates any code generated by JavaCC.
       jjtree       - updates any code generated via JJTree. 
       test         - runs JUnit tests
       testcoverage - runs JUnit test coverage analysis
       regression   - runs regression test application
	   pdf          - builds PDF documentation
       help         - prints this message
     
ENVIRONMENT:
============== 
			
       java.home = ${java.home}
       ant.home = ${ant.home}</echo>
    </target>

    <!-- ============================================= -->
    <!-- Creates a full release of Cayenne.            -->
    <!-- ============================================= -->
    <target name="release" description="creates a full Cayenne distribution.">
		<ant antfile="build-cayenne.xml" target="dist-src"/>
		<ant antfile="build-modeler.xml" target="dist-src"/>
		<ant antfile="build-dvmodeler.xml" target="dist-src"/>
		<ant antfile="build-tutorials.xml" target="dist-src"/>
		<ant antfile="build-doc.xml" target="dist-src"/>
		
		<copy tofile="${dist}/RELEASE-NOTES.txt" file="${notes.dir}/RELEASE-NOTES-${project.version}.txt"/>
		<copy tofile="${dist}/UPGRADE.txt" file="${notes.dir}/UPGRADE-${project.version}.txt"/>
		
		<tar tarfile="${dist.base}/${project.name}-${project.version}.tar.gz" compression="gzip">
			<tarfileset dir="${dist.base}">
				<include name="${project.name}-${project.version}/**"/>
				<exclude name="${project.name}-${project.version}/**/*.sh"/>
			</tarfileset>
			
			<!-- Set correct permissions -->
			<tarfileset dir="${dist.base}" mode="755">
				<include name="${project.name}-${project.version}/**/*.sh"/>
			</tarfileset>
		</tar>
    </target>
        
    <!-- ========================================== -->
    <!-- Runs Cayenne Unit Tests                    -->
    <!-- ========================================== -->
    <target name="test" description="runs JUnit tests">
		<ant antfile="build-cayenne.xml" target="dist-bin"/>
		<ant antfile="build-modeler.xml" target="dist-bin"/>
		
		<ant antfile="build-tests.xml" target="test"/>
    </target>

    <!-- ========================================== -->
    <!-- Runs Unit Test Coverage Analysis           -->
    <!-- ========================================== -->
    <target name="testcoverage" description="create JUnit test coverage report">
		<property name="coverage.enabled" value="true"/>
		<antcall target="test"/>
    </target>

    <!-- ========================================== -->
    <!-- Builds all Cayenne Java subproject JARS.   -->
    <!-- ========================================== -->
    <target name="jar">
		<ant antfile="build-cayenne.xml" target="dist-bin"/>
		<ant antfile="build-modeler.xml" target="dist-bin"/>
		<ant antfile="build-dvmodeler.xml" target="dist-bin"/>
		<ant antfile="build-tests.xml" target="dist-bin"/>
    </target>
    
    <!-- ========================================== -->
    <!-- Compiles all Cayenne Java subprojects.     -->
    <!-- ========================================== -->
    <target name="compile">
		<ant antfile="build-cayenne.xml" target="compile" inheritrefs="true"/>
		<ant antfile="build-modeler.xml" target="compile" inheritrefs="true"/>
		<ant antfile="build-dvmodeler.xml" target="compile" inheritrefs="true"/>
		<ant antfile="build-tests.xml" target="compile" inheritrefs="true"/>
    </target>

    <!-- ========================================== -->
    <!-- Cleans distribution files and subprojects. -->
    <!-- ========================================== -->
    <target name="clean" depends="clean-java">
        <delete dir="${dist.base}"/>
        <delete file="velocity.log" failonerror="false"/>
    </target>
	
    <!-- ========================================== -->
    <!-- Cleans compiled Java sources.              -->
    <!-- ========================================== -->    
    <target name="clean-java">
		<delete includeemptydirs="true">
			<fileset dir="${build}"/>
        </delete>
    </target>
	
    <!-- ========================================== -->
    <!-- Runs Cayenne Regression Tests              -->
    <!-- ========================================== -->
    <target name="regression" description="runs regression test application">
		<ant antfile="build-cayenne.xml" target="dist-bin"/>
		<ant antfile="build-tests.xml" target="dist-bin"/>
		<ant antfile="build-regression.xml" target="test"/>
    </target>
    
    <!-- ========================================== -->
    <!-- Updates any code generated by JavaCC.      -->
    <!-- ========================================== -->
    <target name="javacc" description="Updates any code generated by JavaCC">
        <ant antfile="build-cayenne.xml" target="javacc"/>
    </target>

    <!-- ========================================== -->
    <!-- Updates any code generated via JJTree.     -->
    <!-- ========================================== -->
    <target name="jjtree" description="Updates any code generated via JJTree">
        <ant antfile="build-cayenne.xml" target="jjtree"/>
    </target>

    <!-- ========================================== -->
    <!-- Builds Cayenne documentation.             -->
    <!-- ========================================== -->
    <target name="doc">
        <ant antfile="build-doc.xml" target="doc"/>
        <ant antfile="build-tutorials.xml" target="doc"/>
    </target>


    <!-- ========================================== -->
    <!-- Builds API documenatation.                 -->
    <!-- ========================================== -->
	<target name="api">
		<ant antfile="build-cayenne.xml" target="api" inheritrefs="true"/>
	</target>
	
	
	<!-- ========================================== -->
    <!-- Builds PDF documenatation.                 -->
    <!-- ========================================== -->
    <target name="pdf" description="builds PDF documentation.">
		<!-- copy images first -->
		<ant antfile="build-doc.xml" target="doc-img"/>
		<ant antfile="build-pdf.xml"/>
    </target> 
</project>
