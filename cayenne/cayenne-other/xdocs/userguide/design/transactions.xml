<document>
<title>User Guide - Design</title>
<toc name="toc-user-guide" chapter="4. Design"/>
<body>
    <section name="4. Design">
        <subsection name="4.10 Cayenne Transactions">
            <p>The Cayenne API allows a developer to control transactional behavior in different deployment environments.
             Cayenne can be configured to commit its own transactions or to rely on container-managed transactions, as <a href=
             "../../modelerguide/configure-deployment/configure-transactions.html">described in the Modeler Guide</a>. 
            </p>
            
            <panel name="Note:"> While users are allowed to customize transactions, in most cases they shouldn't 
            worry about this beyond choosing Cayenne vs. container-managed transactions. So this chapter is purely 
            academic for most applications.
            </panel>
            
            <subsection name="4.10.1 Transactional Behavior">
            <p>Transaction control in Cayenne is done via instances of <a href=
			"../../api/cayenne/org/objectstyle/cayenne/access/Transaction.html">Transaction</a>
            class.</p>
            
            <p><strong>Transactions at the application level - DataContext behavior.</strong> Whenever a select or
            commit operation is initiated, DataContext obtains a new Transaction object by invoking 
            <code>DataDomain.createTransaction()</code> on the parent DataDomain. DataDomain returns a 
            transaction with preconfigured commit behavior. This is defined by the boolean property <code>usingExternalTransactions</code>,
            that can be configured in the Modeler or via API.
            </p>
            
            <p><strong>Transactions at the database level - DataNode behavior.</strong> Transaction is passed to DataNode
            as an argument to <code>DataNode.performQueries(List, OperationObserver, Transaction)</code>. DataNode does
            not attempt to commit or rollback a connection used in the query, rather it adds currently used JDBC Connection
            to the Transaction object by calling <code>Transaction.addConnection(java.sql.Connection)</code>.
            </p>
            </subsection>
            
            <subsection name="4.10.2 User Control over Transactions">
            <p>As mentioned before, users won't normally have to deal with Transactions. However if there is a need to do
            so, there are a few ways to customize transactions as described below.</p>
            
            <p><strong>Explict Transactions.</strong> Users can bind their own transaction to the execution thread before starting
			Cayenne operation. Note that in this case, it is always a caller's responsibility to
			invoke "begin/commit/rollback" methods and unbind the transaction when it is finished. For example:
				</p>
<source>Transaction transaction = new MyTransaction();
Transaction.bindThreadTransaction(transaction);

try {
    // do something...
    ....
    // if no failures, commit
    transaction.commit();
}
catch (Exception ex) {
    transaction.setRollbackOnly();
}
finally {
    // unbind
    Transaction.bindThreadTransaction(null);
    // rollback
    if (getStatus() == Transaction.STATUS_MARKED_ROLLEDBACK) {
        try {
           rollback();
        }
        catch (Exception rollbackEx) {
        }
    }
}</source>
		
			<p> </p>
			
			<p><strong>Explict Transactions Made Simple.</strong>
			As mentioned above, when using a Transaction explicitly, it is the caller's responsibility to commit or rollback 
			the transaction. To simplify this task, the code Transaction has a method
			<code>performQueries</code> that already does all of the above. This is much less error-prone than manually 
			managing the Transaction state.
			</p>
<source>Transaction transaction = new MyTransaction();
transaction.performQueries(context, queries, observer);</source>
				<p> </p>
			
           <p><strong>TransactionDelegate.</strong> Another way to customize existing Cayenne transactions behavior and/or
           track transactions execution is <a href=
			"../../api/cayenne/org/objectstyle/cayenne/access/TransactionDelegate.html">TransactionDelegate</a> interface. 
			A delegate can be set per DataDomain. All DataContexts created by this Domain will "inherit" the delegate. E.g.:</p>
<source>
// on startup
DataDomain defaultDomain = Configuration.getDomain();
defaultDomain.setTransactionDelegate(new CustomTransactionDelegate());
</source>

			<p>TransactionDelegate implements a set of methods that are called during transaction processing. All methods that have a boolean 
			return type allow the delegate to suppress default transaction processing by returning <code>false</code>, thus preventing Cayenne 
			from interfering with container
			TransactionManager. 
            </p>
            </subsection>
        </subsection>
    </section>
</body>
</document>
