<document>
<title>User Guide - Deployment</title>
<toc name="toc-user-guide" chapter="12. Deployment"/>
<body>
     <section name="12. Deployment">        
           <p>Cayenne application deployment is about configuring the application 
           so that at runtime it can find a main project file (cayenne.xml) and 
           associated resources, such as DataMap and DataNode XML files.
           </p>
           
           <p>The central point in Cayenne deployment is the
           	<a href="../../api/cayenne/org/objectstyle/cayenne/conf/Configuration.html">Configuration</a>
            class. It locates and loads all the mapping and configuration information required 
            for Cayenne at runtime. By default Configuration uses a singleton model, i.e. normally 
            there is only one instance of Configuration (or a subclass) that exists 
            in the application. This shared instance can be accessed in the following way:
            </p>

<source>import org.objectstyle.cayenne.conf.Configuration;
import org.objectstyle.cayenne.access.DataDomain;
...           
Configuration conf = Configuration.getSharedConfiguration();
DataDomain domain = conf.getDomain();
</source>
<p>As discussed in the following chapters Configuration works behind the scenes 
	and users rarely care about it. Application code is normally only concered 
	with obtaining a DataContext.</p>
<panel name="Spring Integration Note:">Spring Framework 
	(http://www.springframework.org) is a popular configuration and deployment 
	environment for all types of applications. Spring contains Cayenne 
	integration classes since version 1.2. It works with Cayenne 1.1 or 
	newer and in the spirit of "dependency injection" doesn't depend on singleton Configuration.</panel>
    </section>
</body>
</document>
